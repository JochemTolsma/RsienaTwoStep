[{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"data-sets","dir":"Articles","previous_headings":"","what":"1. Data sets","title":"Introduction_RsienaTwoStep","text":"Let us look build-data sets RsienaTwoStep.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"adjacency-matrix","dir":"Articles","previous_headings":"1. Data sets > 1.1. net1","what":"1.1.1. Adjacency matrix","title":"Introduction_RsienaTwoStep","text":"","code":"net1 #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"plot","dir":"Articles","previous_headings":"1. Data sets > 1.1. net1","what":"1.1.2. Plot","title":"Introduction_RsienaTwoStep","text":"","code":"net1g <- igraph::graph_from_adjacency_matrix(net1, mode=\"directed\") igraph::plot.igraph(net1g)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"adjacency-matrix-1","dir":"Articles","previous_headings":"1. Data sets > 1.2. net2","what":"1.2.1. Adjacency matrix","title":"Introduction_RsienaTwoStep","text":"","code":"net2 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"plot-1","dir":"Articles","previous_headings":"1. Data sets > 1.2. net2","what":"1.2.2. Plot","title":"Introduction_RsienaTwoStep","text":"","code":"net2g <- igraph::graph_from_adjacency_matrix(net2, mode=\"directed\") igraph::plot.igraph(net2g)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"logic","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.1. Logic","title":"Introduction_RsienaTwoStep","text":"sample ego construct possible alternative future networks based possible ministeps ego calculate sampled ego evaluates possible networks Let ego pick network, , let agent decide tie-change GOTO 1 (STOPPING RULE: think made enough ministeps)","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"possible-networks-after-ministep","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.2. Possible networks after ministep","title":"Introduction_RsienaTwoStep","text":"Let us suppose want know possible networks possible ministeps one actor part net2. , let us assume ego#2’s turn decide tie-change. possible networks? function returns list possible networks possible tie-changes available ego#2 given network net2. look closely see options[[2]] equals original network (.e. ego#2 decided change tie).","code":"options <- ts_alternatives_ministep(net=net2, ego=2) options #> [[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    1    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    1    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"network-statistics","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.3. Network statistics","title":"Introduction_RsienaTwoStep","text":"option ego#2 choose? Naturally depend network characteristics (statistics) ego#2 finds relevant. Let us suppose ego#2 bases decision solely number ties sends others number reciprocated ties others. Let us count number ties ego#2 sends alters. second (original) option: package RsienaTwoStep functions following network statistics \\(s\\) (see Ripley et al. (2022) Chapter 12 mathematical formulation): degree: ts_degree() reciprocity: ts_recip() outdegree activity: ts_outAct() indegree activity: ts_inAct() outdegree popularity: ts_outPop() indegree popularity: ts_inPop() transitivity: ts_transTrip() mediated transitivity: ts_transMedTrip() transitive reciprocated triplets: ts_transRecTrip() number three-cycles: ts_cycle3() Naturally, free define network statistics.","code":"ts_degree(net=options[[1]], ego=2) #> [1] 2 ts_degree(net=options[[2]], ego=2) #> [1] 1"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"evaluation-function","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.4. Evaluation function","title":"Introduction_RsienaTwoStep","text":"evaluation value ego#2 attach network statistics consequently network (vicinity) whole? Well parameters, \\(\\beta\\), normally estimate RSiena::siena07(). Let us suppose importance statistic ‘degree’ -1 statistic ‘reciprocity’ 2. calculate evaluation network saved options[[2]] hand: \\[f_{eval}(\\mathbf{s_{}},\\mathbf{\\beta}) = \\mathbf{s_i}^\\mathsf{T}\\mathbf{\\beta} \\] little help network statistic functions: use ts_eval(). Now, let us calculate evaluation 5 possible networks:","code":"1*-1 + 0*2 #> [1] -1 ts_degree(net=options[[2]], ego=2)*-1 + ts_recip(net=options[[2]], ego=2)*2 #> [1] -1 eval <- ts_eval(net=options[[2]], ego=2, statistics=list(ts_degree, ts_recip), parameters=c(-1,2)) eval #> [1] -1 eval <- sapply(options, FUN=ts_eval, ego=2, statistics=list(ts_degree, ts_recip), parameters=c(-1,2)) eval #> [1] -2 -1 -2 -2  0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"choice-function","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.5. Choice function","title":"Introduction_RsienaTwoStep","text":"option ego#2 choose? Naturally stochastic process. see last option highest evaluation. use McFadden’s choice function (information see wiki), let \\(P_{ni}\\) probability ego \\(n\\) chooses network/alternative \\(\\). choice function given : \\[P_{ni} = \\frac{exp(\\mathbf{s_i}^\\mathsf{T}\\mathbf{\\beta} )}{\\Sigma_{j=1}^J exp(\\mathbf{s_j}^\\mathsf{T}\\mathbf{\\beta} )},\\] \\(s_i\\) vector value network statistics network \\(\\) \\(\\beta\\) vector parameter values. Hence, \\(\\mathbf{s_i}^\\mathsf{T}\\mathbf{\\beta}\\) value evaluation network \\(\\). Let us force ego#2 make decision. repeat process, …: sample agent construct possible alternative networks calculate sampled agent evaluates possible networks Let agent pick network, , let agent decide tie-change GO BACK 1 (STOPPING RULE: think made enough ministeps) …agent based model.","code":"choice <- sample(1:length(eval), size=1, prob=exp(eval)/sum(exp(eval))) print(\"choice:\")  choice print(\"network:\") options[[choice]] #> [1] \"choice:\" #> [1] 5 #> [1] \"network:\" #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"stopping-rule","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.6. Stopping rule","title":"Introduction_RsienaTwoStep","text":"many ministeps allow? Well, normally estimated siena07 rate parameter. make rate parameter conditional actor covariates network characteristics, rate parameter can interpreted average number ministeps actor network allowed make time . Let us suppose rate parameter 2 . Thus total number possible ministeps nrow(net2)*rate: 10. detailed - correct interpretation rate parameter siena07 see: www.jochemtolsma.nl","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"example","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.7. Example","title":"Introduction_RsienaTwoStep","text":"demonstrate network evolution:","code":"ts_sims(nsims=1, net=net2, rate=2, statistics=list(ts_degree, ts_recip), parameters = c(-1,2), p2step=c(1,0,0), chain = TRUE ) #> [[1]] #> [[1]][[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]][[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[1]][[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[1]][[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[1]][[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[1]][[6]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    1    0 #> [4,]    0    0    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[1]][[7]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    1    0 #> [4,]    0    0    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[1]][[8]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    1    0 #> [4,]    1    0    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[1]][[9]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    1    0 #> [4,]    1    1    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[1]][[10]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    1    1    1    0    0 #> [5,]    1    0    0    0    0"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"logic-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.1. Logic","title":"Introduction_RsienaTwoStep","text":"general logic ABM allows twosteps similar ABM ministep model: sample two agents construct possible alternative networks calculate sampled agents evaluate possible networks Let agents together pick subsequent network, , let agents decide twostep (simultaneous two ministeps) GOTO 1 (STOPPING RULE: think made enough ministeps/twosteps)","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"sample-two-agents","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.2. Sample two agents","title":"Introduction_RsienaTwoStep","text":"Simultaneity: agents sampled randomly Strict coordination: specific dyads sampled (specific distance , based either -, - reciprocal ties) Weak coordination: agents sampled randomly specific twosteps regarded ‘coordinated’ twosteps , consequently possible alternative networks included choice set dyad.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"possible-networks-after-twostep","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.3. Possible networks after twostep","title":"Introduction_RsienaTwoStep","text":"want allow simultaneity, simply let first agent1 make possible ministeps conditional alternative networks let agent2 make possible ministeps. Please note order let agents make ministeps important. simple construct networks result agent1 agent2 make simultaneous ministep. Exception: weak coordination assess possible alternative networks impact evaluation function egos. possible alternative networks regarded result coordination included choice set. Thus, necessarry ego1 ego2 connected time1 least connected time2 way influence others evaluation function. implementation current version RsieneTwoStep , however, bit different. weak coordination simple assess distance ego1 ego2 time1 time2. eithter time1 time2 distance within set threshold, regard twostep coordinated twostep.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"network-statistics-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.4. Network statistics","title":"Introduction_RsienaTwoStep","text":"use network statistics ABM ministep. please note, existing network statistics RSiena make sense. See example figure . Suppose evaluation transitive triad actor depends whether path j closing path (.e., created path h j) . twostep, ties may created simultaneously distinguish two routes. twostep versus ministeps  note: Dashed arrows represent ministeps (long dash) twostep (short dash); solid arrows represent initial ties (grey) created ties (red).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"evaluation-function-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.5. Evaluation function","title":"Introduction_RsienaTwoStep","text":"start letting involved agent evaluate possible networks based individual evaluation functions. Thus agent1 gives evaluation agent2 gives evaluation. Next decide combine separate evaluations two agents. now, RsienaTwoStep, simply take mean two separate evaluations final evaluation score.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"choice-function-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.6. Choice function","title":"Introduction_RsienaTwoStep","text":"follow logic . know evaluation score network simply apply Mc Fadden’s choice function. , actors together ‘decide’ future network possible alternative networks choice set, given combined evaluation networks. Thus see dyad formed agent1 agent2 decision agent. Please agents (rather dyad) thus favor network highest combined ‘utility’ score. necessarily network give one two agents highest satisfaction.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"stopping-rule-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.7. Stopping rule","title":"Introduction_RsienaTwoStep","text":"logic exactly similar. However, count twostep two ministeps. Thus actor allowed make average 8 ministeps, actors allowed make average 4 twosteps.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"example-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.8. Example","title":"Introduction_RsienaTwoStep","text":"","code":"ts_sims(nsims = 1, net = net2, rate = 2, statistics = list(ts_degree, ts_recip), parameters = c(-1, 2), p2step=c(0,1,0), chain = TRUE) #> [[1]] #> [[1]][[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]][[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]][[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]][[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    1    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]][[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    1    0 #> [2,]    1    0    1    0    0 #> [3,]    0    1    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    0"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"logic-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.1. Logic","title":"Introduction_RsienaTwoStep","text":"second way ministep assumption can relaxed allow actor make two ministeps simultaneously. Suppose triad formed actors , j h tie h j. simstep versus ministeps  note: Dashed arrows represent ministeps (long dash) simstep (short dash); solid arrows represent initial ties (grey) created ties (red). Suppose, actors evaluate transitive triplet structures positively. Normally, ministep assumption, actor first make tie actor h (j) turn make tie change, make tie actor j (h). Naturally, larger networks lot happened mean time. Given network structure time, actor allowed make second ministep, actor may favor making additional tie actor j (h) anymore. Also, actor may even want create tie actor h j already sure can close triad immediately afterwards (even simultaneously). Naturally, real life situations, strange create multiple ties (almost) time. See example paper impact Kudos running behavior (Franken, Bekhuis, Tolsma 2023). Strava (social media matter), common give multiple kudos (likes) different people network - less - time.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"possible-networks-after-simstep","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.2. Possible networks after simstep","title":"Introduction_RsienaTwoStep","text":"Simply networks arise two sequential ministeps made one actor (including change option). Please note choice set contains unique network configurations.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"network-statistics-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.3. Network statistics","title":"Introduction_RsienaTwoStep","text":"use network statistics ABM ministep. please note, existing network statistics RSiena make sense. See example figure . Suppose evaluation transitive triad actor depends whether path j closing path path h. simstep, ties may created simultaneously distinguish two routes.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"evaluation-function-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.4. Evaluation function","title":"Introduction_RsienaTwoStep","text":"Identical ABM ministep.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"choice-function-","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.5. Choice function.","title":"Introduction_RsienaTwoStep","text":"Identical ABM ministep.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"stopping-rule-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.6. Stopping rule","title":"Introduction_RsienaTwoStep","text":"logic exactly similar. However, count simstep two ministeps. Thus actor allowed make average 8 ministeps, actors allowed make average 4 simsteps.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"example-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.7. Example","title":"Introduction_RsienaTwoStep","text":"","code":"ts_sims(nsims = 1, net = net2, rate = 2, statistics = list(ts_degree, ts_recip, ts_outAct), parameters = c(-2, 2,2), p2step=c(0,0,1), chain = TRUE) #> [[1]] #> [[1]][[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]][[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    0 #> [2,]    1    0    1    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]][[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    0 #> [2,]    1    0    1    1    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]][[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    0 #> [2,]    1    0    1    1    1 #> [3,]    1    0    0    0    0 #> [4,]    1    1    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]][[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    1    1    1 #> [2,]    1    0    1    1    1 #> [3,]    1    0    0    0    0 #> [4,]    1    1    0    0    0 #> [5,]    0    0    0    0    0"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"simulate-networks","dir":"Articles","previous_headings":"5. Network census","what":"5.1. Simulate networks","title":"Introduction_RsienaTwoStep","text":"Let us simulate five times outcome ABM twostep process save final network","code":"nets <- ts_sims(nsims = 5, net = net2, rate = 2, statistics = list(ts_degree, ts_recip), parameters = c(-1, 2), p2step=c(0,1,1), chain = FALSE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"dyad-and-triad-configurations","dir":"Articles","previous_headings":"5. Network census","what":"5.2. Dyad and triad configurations","title":"Introduction_RsienaTwoStep","text":"Now want count dyad triad configurations.","code":"df_dyads <- ts_dyads(nets, forplot = FALSE, simtype=\"twostep: random\")   df_triads <- ts_triads(nets, forplot = FALSE, simtype=\"twostep: random\") df_dyads df_triads #>   Mut Asym Null            type #> 1   1    2    7 twostep: random #> 2   3    3    4 twostep: random #> 3   3    0    7 twostep: random #> 4   2    3    5 twostep: random #> 5   1    1    8 twostep: random #>   003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U 120C 210 300 #> 1   3   3   2    1    0    0    1    0    0    0   0    0    0    0   0   0 #> 2   0   0   4    1    0    1    1    1    0    0   0    0    0    1   1   0 #> 3   3   0   5    0    0    0    0    0    0    0   2    0    0    0   0   0 #> 4   0   5   1    0    0    0    1    1    0    0   1    0    0    1   0   0 #> 5   5   2   2    0    0    0    1    0    0    0   0    0    0    0   0   0 #>              type #> 1 twostep: random #> 2 twostep: random #> 3 twostep: random #> 4 twostep: random #> 5 twostep: random"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/1.Introduction_RsienaTwoStep.html","id":"violin-plots","dir":"Articles","previous_headings":"5. Network census","what":"5.3. Violin plots","title":"Introduction_RsienaTwoStep","text":"want make violin plots census, best set option forplot TRUE. Just example:","code":"df_dyads2 <- ts_dyads(nets, forplot = TRUE, simtype=\"twostep: random\") library(ggplot2) #> Warning: package 'ggplot2' was built under R version 4.2.2 p <- ggplot(df_dyads2, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1)) +    xlab('dyad configuration') + ylab('count')    p"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"1. Getting started","title":"MinistepToTwostep","text":"","code":"rm(list=ls())"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"basic-functions","dir":"Articles","previous_headings":"1. Getting started","what":"1.1. Basic functions","title":"MinistepToTwostep","text":"","code":"fsave <- function(x, file, location = \"./data/processed/\", ...) {     if (!dir.exists(location))         dir.create(location)     datename <- substr(gsub(\"[:-]\", \"\", Sys.time()), 1, 8)     totalname <- paste(location, datename, file, sep = \"\")     print(paste(\"SAVED: \", totalname, sep = \"\"))     save(x, file = totalname) }  fpackage.check <- function(packages) {     lapply(packages, FUN = function(x) {         if (!require(x, character.only = TRUE)) {             install.packages(x, dependencies = TRUE)             library(x, character.only = TRUE)         }     }) }  colorize <- function(x, color) {     sprintf(\"<span style='color: %s;'>%s<\/span>\", color, x) }"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"packages","dir":"Articles","previous_headings":"1. Getting started","what":"1.2. Packages","title":"MinistepToTwostep","text":"","code":"packages = c(\"RsienaTwoStep\", \"doParallel\", \"ggplot2\")  fpackage.check(packages) #> Loading required package: RsienaTwoStep #> Loading required package: foreach #> Loading required package: doParallel #> Loading required package: iterators #> Loading required package: parallel #> Loading required package: ggplot2 #> Warning: package 'ggplot2' was built under R version 4.2.2 #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> NULL"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"setting-up-cluster","dir":"Articles","previous_headings":"","what":"2. Setting up cluster","title":"MinistepToTwostep","text":"","code":"#stopCluster(my.cluster)  n.cores <- parallel::detectCores() - 1  #save one core for other work # create the cluster my.cluster <- parallel::makeCluster(n.cores, type = \"PSOCK\") # register it to be used by %dopar% doParallel::registerDoParallel(cl = my.cluster)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"model-1-degree-and-reciprocity","dir":"Articles","previous_headings":"3. Running simulations on toy data","what":"3.1. Model 1: Degree and reciprocity","title":"MinistepToTwostep","text":"Let us assume people really don’t like non-reciprocal tie like reciprocal ties lot. (want help help !) Thus start network without many (reciprocal) ties difficult get reciprocal ties normal model. However, simultaneity possible.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"simulate-networks","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.1. Model 1: Degree and reciprocity","what":"3.1.1. Simulate networks","title":"MinistepToTwostep","text":"","code":"sims1 <- ts_sims(nsims=1000, parallel=TRUE, net=net1, rate=10, statistics=list(ts_degree, ts_recip), parameters=c(-1,2), p2step=0, chain=FALSE) #ministep  sims2 <- ts_sims(nsims=1000, parallel=TRUE, net=net1, rate=10, statistics=list(ts_degree, ts_recip), parameters=c(-1,2), p2step=1, chain=FALSE) #twostep: simultaneity  sims3 <- ts_sims(nsims=1000, parallel=TRUE, net=net1, rate=10, statistics=list(ts_degree, ts_recip), parameters=c(-1,2), p2step=1, dist1=2, dist2=2, chain=FALSE) #twostep: weak coordination  sims4 <- ts_sims(nsims=1000, parallel=TRUE, net=net1, rate=10, statistics=list(ts_degree, ts_recip), parameters=c(-1,2), p2step=1, dist1=2,  chain=FALSE) #twostep: strict coordination"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"counting-dyads","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.1. Model 1: Degree and reciprocity","what":"3.1.2. Counting dyads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_dyads(sims=sims1, simtype=\"ministep\") df2 <- ts_dyads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_dyads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_dyads(sims=sims4, simtype=\"twostep: strict coordination\")    df <- rbind(df1, df2, df3, df4)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"plot-results-of-dyadcensus","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.1. Model 1: Degree and reciprocity","what":"3.1.3. Plot results of dyadcensus","title":"MinistepToTwostep","text":"","code":"p <- ggplot(df, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1))     p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"conclusion","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.1. Model 1: Degree and reciprocity","what":"3.1.4. Conclusion","title":"MinistepToTwostep","text":"Yes, allow simultaneity, observe reciprocal ties number possible tie-changes. Perhaps model ministeps reach target values (dyads) probably using possible tie-changes. mean noise network chains, can/results network statistics. Also note, make network larger, simultaneity less likely different two consecutive ministeps, two agents influence others evaluation functions.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"model-2-degree-reciprocity-transtrip","dir":"Articles","previous_headings":"3. Running simulations on toy data","what":"3.2. Model 2: Degree, reciprocity, transTrip","title":"MinistepToTwostep","text":"Let us assume people really don’t like non-reciprocal tie like reciprocal ties lot favor transitivity. unlikely transitive triad emerge coordination, one actors evaluate transitive triad positively wrong position. , reciprocal ties likely actors coordinate, also observe transitive triads.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"simulate-networks-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.1. Simulate networks","title":"MinistepToTwostep","text":"","code":"sims1 <- ts_sims(nsims=1000, parallel=TRUE, net=net1, rate=5, statistics=list(ts_degree, ts_recip, ts_transTrip), parameters=c(-2,2, 1), p2step=0, chain=FALSE) #ministep  sims2 <- ts_sims(nsims=1000, parallel=TRUE, net=net1, rate=5, statistics=list(ts_degree, ts_recip,ts_transTrip), parameters=c(-2,2, 1), p2step=1, chain=FALSE) #twostep: simultaneity  sims3 <- ts_sims(nsims=1000, parallel=TRUE, net=net1, rate=5, statistics=list(ts_degree, ts_recip,ts_transTrip), parameters=c(-2,2, 1), p2step=1, dist1=2, dist2=2, chain=FALSE) #twostep: weak coordination  sims4 <- ts_sims(nsims=1000, parallel=TRUE, net=net1, rate=5, statistics=list(ts_degree, ts_recip, ts_transTrip), parameters=c(-2,2,1), p2step=1, dist1=2,  chain=FALSE) #twostep: strict coordination"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"counting-dyads-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.2. Counting dyads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_dyads(sims=sims1, simtype=\"ministep\") df2 <- ts_dyads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_dyads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_dyads(sims=sims4, simtype=\"twostep: strict coordination\")    df <- rbind(df1, df2, df3, df4)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"plot-results-of-the-dyadcensus","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.3. Plot results of the dyadcensus","title":"MinistepToTwostep","text":"","code":"p <- ggplot(df, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1))     p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"counting-triads","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.4. Counting triads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_triads(sims=sims1, simtype=\"ministep\") df2 <- ts_triads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_triads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_triads(sims=sims4, simtype=\"twostep: strict coordination\")    df <- rbind(df1, df2, df3, df4)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"plot-results-of-the-triadcensus","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.5. Plot results of the triadcensus","title":"MinistepToTwostep","text":"","code":"# 030T *1 # 120U *1 # 120D *2 # 120C *2 # 210 * 4 # 300 * 6   dftest <- df[df$x==\"030T\" | df$x==\"120U\", ] p1 <- ggplot(dftest, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1))   p1 dftest <- df[df$x==\"120D\" | df$x==\"120C\" , ] p2 <- ggplot(dftest, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1))   p2 dftest <- df[df$x==\"210\" | df$x==\"300\" , ] p3 <- ggplot(dftest, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1))   p3"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"model-3-degree-reciprocity-transtrip-transmedtrip","dir":"Articles","previous_headings":"3. Running simulations on toy data","what":"3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","title":"MinistepToTwostep","text":"Let us assume people really don’t like non-reciprocal tie like reciprocal ties lot favor transitivity. now likely transitive triad emerge coordination, one actors evaluate transTrip may positively evaluate transMedTrip positively.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"simulate-networks-2","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.1. Simulate networks","title":"MinistepToTwostep","text":"","code":"nsims <- 500  sims1 <- ts_sims(nsims=nsims, parallel=TRUE, net=net1, rate=10, statistics=list(ts_degree, ts_recip, ts_transTrip, ts_transMedTrip), parameters=c(-2,1,2,2), p2step=0, chain=FALSE) #twostep: ministep  sims2 <- ts_sims(nsims=nsims, parallel=TRUE, net=net1, rate=10, statistics=list(ts_degree, ts_recip, ts_transTrip, ts_transMedTrip), parameters=c(-2,1,2,2), p2step=1, chain=FALSE) #twostep: random  sims3 <- ts_sims(nsims=nsims, parallel=TRUE, net=net1, rate=10, statistics=list(ts_degree, ts_recip, ts_transTrip, ts_transMedTrip), parameters=c(-2,1,2,2), p2step=1, dist1=2, dist2=2, chain=FALSE) #twostep: weak  sims4 <- ts_sims(nsims=nsims, parallel=TRUE, net=net1, rate=5, statistics=list(ts_degree, ts_recip, ts_transTrip, ts_transMedTrip), parameters=c(-2,1,2,2), p2step=1, dist1=2,  chain=FALSE) #twostep: strict coordination"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"counting-dyads-2","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.2. Counting dyads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_dyads(sims=sims1, simtype=\"ministep\") df2 <- ts_dyads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_dyads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_dyads(sims=sims4, simtype=\"twostep: strict coordination\")    df <- rbind(df1, df2, df3, df4)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"plot-results-of-the-dyadcensus-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.3. Plot results of the dyadcensus","title":"MinistepToTwostep","text":"","code":"p <- ggplot(df, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1))     p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"counting-triads-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.4. Counting triads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_triads(sims=sims1, simtype=\"ministep\") df2 <- ts_triads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_triads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_triads(sims=sims4, simtype=\"twostep: strict coordination\")    df <- rbind(df1, df2, df3, df4)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/2.MinistepToTwostep.html","id":"plot-results-of-the-triadcensus-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.5. Plot results of the triadcensus","title":"MinistepToTwostep","text":"","code":"# Basic violin plot # 030T *1 # 120U *1 # 120D *2 # 120C *2 # 210 * 4 # 300 * 6 #dftest <- df[df$x==\"030T\" | df$x==\"120D\" | df$x==\"120U\" | df$x==\"120C\" | df$x==\"210\" | df$x==\"300\", ]  dftest <- df[df$x==\"030T\" | df$x==\"120U\", ] p1 <- ggplot(dftest, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1))  p1 dftest <- df[df$x==\"120D\" | df$x==\"120C\" , ] p2 <- ggplot(dftest, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1))  p2 dftest <- df[df$x==\"210\" | df$x==\"300\" , ] p3 <- ggplot(dftest, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1))   p3"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"1. Getting started","title":"RSienaWorkFlow","text":"","code":"rm(list=ls())"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"basic-functions","dir":"Articles","previous_headings":"1. Getting started","what":"1.1. Basic functions","title":"RSienaWorkFlow","text":"","code":"fsave <- function(x, file, location = \"./data/processed/\", ...) {     if (!dir.exists(location))         dir.create(location)     datename <- substr(gsub(\"[:-]\", \"\", Sys.time()), 1, 8)     totalname <- paste(location, datename, file, sep = \"\")     print(paste(\"SAVED: \", totalname, sep = \"\"))     save(x, file = totalname) }  fpackage.check <- function(packages) {     lapply(packages, FUN = function(x) {         if (!require(x, character.only = TRUE)) {             install.packages(x, dependencies = TRUE)             library(x, character.only = TRUE)         }     }) }  colorize <- function(x, color) {     sprintf(\"<span style='color: %s;'>%s<\/span>\", color, x) }"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"packages","dir":"Articles","previous_headings":"1. Getting started","what":"1.2. Packages","title":"RSienaWorkFlow","text":"","code":"packages = c(\"RsienaTwoStep\", \"RSiena\", \"doParallel\", \"compiler\", \"ggplot2\")  fpackage.check(packages) #> Loading required package: RsienaTwoStep #> Loading required package: foreach #> Loading required package: RSiena #> Loading required package: doParallel #> Loading required package: iterators #> Loading required package: parallel #> Loading required package: compiler #> Loading required package: ggplot2 #> Warning: package 'ggplot2' was built under R version 4.2.2 #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> NULL #>  #> [[4]] #> NULL #>  #> [[5]] #> NULL"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"auxiliary-functions-for-rsienasienagof","dir":"Articles","previous_headings":"1. Getting started","what":"1.3. Auxiliary functions for RSiena::SienaGOF()","title":"RSienaWorkFlow","text":"Please see: RSiena::SienaGOF(). want able dyadcensus/triadcensus GOF Rsiena. Thus, need add .","code":"DyadCensus.sna <- function(i, data, sims, period, groupName, varName, levls=1:3){   unloadNamespace(\"igraph\") # to avoid package clashes   require(network)   require(sna)   x <- networkExtraction(i, data, sims, period, groupName, varName)   if (network.edgecount(x) <= 0){x <- symmetrize(x)}   # because else triad.census(x) will lead to an error   tc <- sna::dyad.census(x)[levls]   # names are transferred automatically   tc }  DyadCensus.sna <- cmpfun(DyadCensus.sna)   TriadCensus.sna <- function(i, data, sims, period, groupName, varName, levls=1:16){   unloadNamespace(\"igraph\") # to avoid package clashes   require(network)   require(sna)   x <- networkExtraction(i, data, sims, period, groupName, varName)   if (network.edgecount(x) <= 0){x <- symmetrize(x)}   # because else triad.census(x) will lead to an error   tc <- sna::triad.census(x)[levls]   # names are transferred automatically   tc }  TriadCensus.sna <- cmpfun(TriadCensus.sna)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"setting-up-cluster","dir":"Articles","previous_headings":"","what":"2. Setting up cluster","title":"RSienaWorkFlow","text":"","code":"#stopCluster(my.cluster)  n.cores <- parallel::detectCores() - 1  #save one core for other work # create the cluster my.cluster <- parallel::makeCluster(n.cores, type = \"PSOCK\") # register it to be used by %dopar% doParallel::registerDoParallel(cl = my.cluster)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"running-siena07","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity","what":"3.1. Running siena07()","title":"RSienaWorkFlow","text":"Make sure sienaAlgorithmCreate(): argument cond set FALSE rate parameter estimated can accessed via summary(ans)$theta. Make sure siena07 returnDeps argument set TRUE simulated networks saved. want able replicate simulated networks siena07 best estimate siena07 one period (two waves) . include following statistics: - degree - reciprocity let’s look","code":"mynet <- sienaDependent(array(c(s501, s502), dim=c(50, 50, 2))) mydata <- sienaDataCreate(mynet) myalgorithm <- sienaAlgorithmCreate(seed=1293, cond=FALSE) #toggle set conditional to retrieve the rate parameter in theta! myeff <- getEffects(mydata) ans1 <- siena07(myalgorithm, data=mydata, effects=myeff, batch=TRUE, returnDeps = TRUE) ans1 #> Estimates, standard errors and convergence t-ratios #>  #>                                      Estimate   Standard   Convergence  #>                                                   Error      t-ratio    #>   1. rate basic rate parameter mynet  5.4779  ( 0.7823   )   -0.1504    #>   2. eval outdegree (density)        -2.2272  ( 0.1282   )   -0.0071    #>   3. eval reciprocity                 2.4316  ( 0.2463   )    0.0007    #>  #> Overall maximum convergence ratio:    0.1563  #>  #>  #> Total of 2439 iteration steps."},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"ministep","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 3.2. Simulate networks via RsienaTwoStep","what":"3.2.1. Ministep","title":"RSienaWorkFlow","text":"","code":"sims1 <- ts_sims(nsims=1000, parallel=TRUE, net=s501, rate=summary(ans1)$theta[1], statistics=list(ts_degree, ts_recip), parameters=summary(ans1)$theta[2:3], p2step=0, chain=FALSE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"simultaneity","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 3.2. Simulate networks via RsienaTwoStep","what":"3.2.2. Simultaneity","title":"RSienaWorkFlow","text":"","code":"sims2 <- ts_sims(nsims=1000, parallel=TRUE, net=s501, rate=summary(ans1)$theta[1], statistics=list(ts_degree, ts_recip), parameters=summary(ans1)$theta[2:3], p2step=1, chain=FALSE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"weak-coordination","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 3.2. Simulate networks via RsienaTwoStep","what":"3.2.3. Weak coordination","title":"RSienaWorkFlow","text":"","code":"sims3 <- ts_sims(nsims=1000, parallel=TRUE, net=s501, rate=summary(ans1)$theta[1], statistics=list(ts_degree, ts_recip), parameters=summary(ans1)$theta[2:3], p2step=1, dist1=2, dist2=2, chain=FALSE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"strict-coordination","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 3.2. Simulate networks via RsienaTwoStep","what":"3.2.4. Strict coordination","title":"RSienaWorkFlow","text":"","code":"sims4 <- ts_sims(nsims=1000, parallel=TRUE, net=s501, rate=summary(ans1)$theta[1], statistics=list(ts_degree, ts_recip), parameters=summary(ans1)$theta[2:3], p2step=1, dist1=2, chain=FALSE)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"rsiena","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 3.3. Counting dyads","what":"3.3.1. RSiena","title":"RSienaWorkFlow","text":"","code":"gofi <- sienaGOF(ans1,                  DyadCensus.sna,                   verbose = TRUE,                  join = TRUE,                   varName = \"mynet\") #> Detected 1000 iterations and 1 group. #> Loading required package: network #>  #> 'network' 1.17.1 (2021-06-12), part of the Statnet Project #> * 'news(package=\"network\")' for changes since last version #> * 'citation(\"network\")' for citation information #> * 'https://statnet.org' for help, support, and other information #> Loading required package: sna #> Loading required package: statnet.common #>  #> Attaching package: 'statnet.common' #> The following objects are masked from 'package:base': #>  #>     attr, order #> sna: Tools for Social Network Analysis #> Version 2.6 created on 2020-10-5. #> copyright (c) 2005, Carter T. Butts, University of California-Irvine #>  For citation information, type citation(\"sna\"). #>  Type help(package=\"sna\") to get started. #> Calculating auxiliary statistics for period  1 . #>   Period 1 #>   > Completed  100  calculations   > Completed  200  calculations   > Completed  300  calculations   > Completed  400  calculations   > Completed  500  calculations   > Completed  600  calculations   > Completed  700  calculations   > Completed  800  calculations   > Completed  900  calculations   > Completed  1000  calculations   > Completed  1000  calculations dfrs <- as.data.frame(gofi[[1]]$Simulations) names(dfrs) <- c(\"Mut\", \"Asym\", \"Null\")  df <- rbind(dfrs, dfrs, dfrs) df$x <- rep(c(\"mut\", \"asym\", \"null\"), each=nrow(dfrs)) df$y <- NA df$y[df$x==\"mut\"] <- df$Mut[df$x==\"mut\"] df$y[df$x==\"asym\"] <- df$Asym[df$x==\"asym\"] df$y[df$x==\"null\"] <- df$Null[df$x==\"null\"] df$type <- \"rsiena\" dfrs_siena <- df rm(list=c(\"df\", \"dfrs\"))"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"rsienatwostep","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 3.3. Counting dyads","what":"3.3.2. RsienaTwoStep","title":"RSienaWorkFlow","text":"","code":"df_ts1 <- ts_dyads(sims=sims1, simtype=\"ministep\")  df_ts2 <- ts_dyads(sims=sims2, simtype=\"twostep-simultaneity\") df_ts3 <- ts_dyads(sims=sims3, simtype=\"twostep-weak coordination\")  df_ts4 <- ts_dyads(sims=sims4, simtype=\"twostep-strict coordination\")"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"all-three-dyad-types","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 3.4. Plotting dyad_census","what":"3.4.1. All three dyad types","title":"RSienaWorkFlow","text":"### 3.4.2. Plotting dyad census selection # 4. Model 2: Degree, reciprocity 3cycle","code":"df <- rbind(dfrs_siena, df_ts1, df_ts2, df_ts3, df_ts4)    p <- ggplot(df, aes(x=x, y=y, fill=factor(type, levels=c(\"rsiena\", \"ministep\", \"twostep-simultaneity\", \"twostep-weak coordination\", \"twostep-strict coordination\"))) ) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +   labs(x = \"dyad type\", y = \"dyad count\", fill=\"simulation type\")  p df <- rbind(dfrs_siena, df_ts1, df_ts2, df_ts3, df_ts4)  df_sel <- df[df$x!=\"null\", ]  dodge <- position_dodge(width = 0.5) p <- ggplot(df_sel, aes(x=x, y=y, fill=factor(type, levels=c(\"rsiena\", \"ministep\", \"twostep-simultaneity\", \"twostep-weak coordination\", \"twostep-strict coordination\"))) ) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +   labs(x = \"dyad type\", y = \"dyad count\", fill=\"simulation type\")  p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"running-siena07-1","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity","what":"4.1. Running siena07()","title":"RSienaWorkFlow","text":"include following statistics: - degree - reciprocity - cycle3 let’s look","code":"mynet <- sienaDependent(array(c(s501, s502), dim=c(50, 50, 2))) mydata <- sienaDataCreate(mynet) myalgorithm <- sienaAlgorithmCreate(seed=1293, cond=FALSE) #toggle set conditional to retrieve the rate parameter in theta! myeff <- getEffects(mydata) myeff <- includeEffects(myeff, cycle3) ans2 <- siena07(myalgorithm, data=mydata, effects=myeff, batch=TRUE, returnDeps = TRUE) fsave(ans2, file=\"ans2.Rdata\") ans2 #> Estimates, standard errors and convergence t-ratios #>  #>                                      Estimate   Standard   Convergence  #>                                                   Error      t-ratio    #>   1. rate basic rate parameter mynet  6.1899  ( 0.8994   )   -0.0788    #>   2. eval outdegree (density)        -2.5006  ( 0.1536   )   -0.0289    #>   3. eval reciprocity                 2.2268  ( 0.2401   )   -0.0614    #>   4. eval 3-cycles                    1.0337  ( 0.2013   )   -0.0358    #>  #> Overall maximum convergence ratio:    0.1307  #>  #>  #> Total of 2131 iteration steps."},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"simulate-networks-via-rsienatwostep-1","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity","what":"4.2. Simulate networks via RsienaTwoStep","title":"RSienaWorkFlow","text":"simulations took two days complete simple HP Elitebook 855 G7","code":"#ministep sims1m2 <- ts_sims(nsims=1000, parallel=TRUE, net=s501, rate=summary(ans2)$theta[1], statistics=list(ts_degree, ts_recip, ts_cycle3), parameters=summary(ans2)$theta[2:4], p2step=0, chain=FALSE) fsave(sims1m2, file=\"sims1m2.Rdata\")  #simultaneity sims2m2 <- ts_sims(nsims=1000, parallel=TRUE, net=s501, rate=summary(ans2)$theta[1], statistics=list(ts_degree, ts_recip, ts_cycle3), parameters=summary(ans2)$theta[2:4], p2step=1, chain=FALSE) fsave(sims2m2, file=\"sims2m2.Rdata\")  #weak coordination sims3m2 <- ts_sims(nsims=1000, parallel=TRUE, net=s501, rate=summary(ans2)$theta[1], statistics=list(ts_degree, ts_recip, ts_cycle3), parameters=summary(ans2)$theta[2:4], p2step=1, dist1=2, dist2=2, chain=FALSE) fsave(sims3m2, file=\"sims3m2.Rdata\")  #strict coordination sims4m2 <- ts_sims(nsims=1000, parallel=TRUE, net=s501, rate=summary(ans2)$theta[1], statistics=list(ts_degree, ts_recip, ts_cycle3), parameters=summary(ans2)$theta[2:4], p2step=1, dist1=2, chain=FALSE)  fsave(sims4m2, file=\"sims4m2.Rdata\")"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"rsiena-1","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 4.3. Counting dyads","what":"4.3.1. RSiena","title":"RSienaWorkFlow","text":"","code":"gofi <- sienaGOF(ans2,                  DyadCensus.sna,                   verbose = TRUE,                  join = TRUE,                   varName = \"mynet\") #> Detected 1000 iterations and 1 group. #> Calculating auxiliary statistics for period  1 . #>   Period 1 #>   > Completed  100  calculations   > Completed  200  calculations   > Completed  300  calculations   > Completed  400  calculations   > Completed  500  calculations   > Completed  600  calculations   > Completed  700  calculations   > Completed  800  calculations   > Completed  900  calculations   > Completed  1000  calculations   > Completed  1000  calculations dfrs <- as.data.frame(gofi[[1]]$Simulations) names(dfrs) <- c(\"Mut\", \"Asym\", \"Null\")  df <- rbind(dfrs, dfrs, dfrs) df$x <- rep(c(\"mut\", \"asym\", \"null\"), each=nrow(dfrs)) df$y <- NA df$y[df$x==\"mut\"] <- df$Mut[df$x==\"mut\"] df$y[df$x==\"asym\"] <- df$Asym[df$x==\"asym\"] df$y[df$x==\"null\"] <- df$Null[df$x==\"null\"] df$type <- \"rsiena\" dfrs_sienam2 <- df rm(list=c(\"df\", \"dfrs\"))"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"rsienatwostep-1","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 4.3. Counting dyads","what":"4.3.2. RsienaTwoStep","title":"RSienaWorkFlow","text":"","code":"df_ts1m2 <- ts_dyads(sims=sims1m2, simtype=\"ministep\")  df_ts2m2 <- ts_dyads(sims=sims2m2, simtype=\"twostep-simultaneity\") df_ts3m2 <- ts_dyads(sims=sims3m2, simtype=\"twostep-weak coordination\")  df_ts4m2 <- ts_dyads(sims=sims4m2, simtype=\"twostep-strict coordination\")"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"all-three-dyad-types-1","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 4.4. Plotting dyad_census","what":"4.4.1. All three dyad types","title":"RSienaWorkFlow","text":"","code":"df <- rbind(dfrs_sienam2, df_ts1m2, df_ts2m2, df_ts3m2, df_ts4m2)  p <- ggplot(df, aes(x=x, y=y, fill=factor(type, levels=c(\"rsiena\", \"ministep\", \"twostep-simultaneity\", \"twostep-weak coordination\", \"twostep-strict coordination\"))) ) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +   labs(x = \"dyad type\", y = \"dyad count\", fill=\"simulation type\")  p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"plotting-dyad-census-selection","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 4.4. Plotting dyad_census","what":"4.4.2. Plotting dyad census selection","title":"RSienaWorkFlow","text":"","code":"df_sel <- df[df$x!=\"null\", ]  p <- ggplot(df_sel, aes(x=x, y=y, fill=factor(type, levels=c(\"rsiena\", \"ministep\", \"twostep-simultaneity\", \"twostep-weak coordination\", \"twostep-strict coordination\"))) ) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +   labs(x = \"dyad type\", y = \"dyad count\", fill=\"simulation type\")  p"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"rsiena-2","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 4.5. Counting triads","what":"4.5.1. RSiena","title":"RSienaWorkFlow","text":"","code":"nsims <- 1000 gofi <- sienaGOF(ans2,                  TriadCensus.sna,                   verbose = TRUE,                  join = TRUE,                   varName = \"mynet\") #> Detected 1000 iterations and 1 group. #> Calculating auxiliary statistics for period  1 . #>   Period 1 #>   > Completed  100  calculations   > Completed  200  calculations   > Completed  300  calculations   > Completed  400  calculations   > Completed  500  calculations   > Completed  600  calculations   > Completed  700  calculations   > Completed  800  calculations   > Completed  900  calculations   > Completed  1000  calculations   > Completed  1000  calculations  dfrs <- as.data.frame(gofi[[1]]$Simulations)  triads <- c(\"003\",  \"012\",  \"102\" , \"021D\", \"021U\", \"021C\" ,\"111D\", \"111U\" ,\"030T\" ,\"030C\", \"201\"  ,\"120D\" ,\"120U\" ,\"120C\" ,\"210\",  \"300\")  names(dfrs) <- triads   dflist <- list() for (i in 1:length(triads)) {   dflist[[i]] <- dfrs } dfrs <- do.call(rbind, dflist) dfrs$x <- rep(triads, each=nsims) dfrs$y <- NA  for (i in 1:length(triads)) {   dfrs$y[dfrs$x==triads[i]] <- dfrs[,triads[i]][dfrs$x==triads[i]] } dfrs$type <- \"rsiena\" dfrs_sienam2 <- dfrs"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"rsienatwostep-2","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 4.5. Counting triads","what":"4.5.2 RsienaTwoStep","title":"RSienaWorkFlow","text":"","code":"df_ts1m2 <- ts_triads(sims=sims1m2, simtype=\"ministep\")  df_ts2m2 <- ts_triads(sims=sims2m2, simtype=\"twostep-simultaneity\") df_ts3m2 <- ts_triads(sims=sims3m2, simtype=\"twostep-weak coordination\")  df_ts4m2 <- ts_triads(sims=sims4m2, simtype=\"twostep-strict coordination\")"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"all-triad-types","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 4.6. Plotting triad census","what":"4.6.1. All triad types","title":"RSienaWorkFlow","text":"","code":"df <- rbind(dfrs_sienam2, df_ts1m2, df_ts2m2, df_ts3m2, df_ts4m2)  p <- ggplot(df, aes(x=x, y=y, fill=factor(type, levels=c(\"rsiena\", \"ministep\", \"twostep-simultaneity\", \"twostep-weak coordination\", \"twostep-strict coordination\")))) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1)) +   labs(x = \"triad type\", y = \"triad count\", fill=\"simulation type\")  p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"plotting-triad-census-selection-i","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 4.6. Plotting triad census","what":"4.6.2 Plotting triad census selection I","title":"RSienaWorkFlow","text":"","code":"df_sel <- df[df$x==\"030C\" | df$x==\"120C\",]  p <- ggplot(df_sel, aes(x=x, y=y, fill=factor(type, levels=c(\"rsiena\", \"ministep\", \"twostep-simultaneity\", \"twostep-weak coordination\", \"twostep-strict coordination\")))) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +   labs(x = \"(cyclic) triad types\", y = \"triad count\", fill=\"simulation type\")  p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"plotting-triad-census-selection-ii","dir":"Articles","previous_headings":"3. Model 1: Degree and reciprocity > 4.6. Plotting triad census","what":"4.6.3 Plotting triad census selection II","title":"RSienaWorkFlow","text":"","code":"df_sel <- df[df$x==\"210\" | df$x==\"300\",]  p <- ggplot(df_sel, aes(x=x, y=y, fill=factor(type, levels=c(\"rsiena\", \"ministep\", \"twostep-simultaneity\", \"twostep-weak coordination\", \"twostep-strict coordination\")))) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +   labs(x = \"(cyclic) triad types\", y = \"triad count\", fill=\"simulation type\")  p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/3.RsienaWorkflow.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"5. Conclusion","title":"RSienaWorkFlow","text":"networks simulated RsienaTwoStep assuming ministep assumption lead identical results simulated networks RSiena. can hence conclude (least used statistics) RsienaTwoStep programmed correctly. model specifications, observe allowing simultaneity really impact observed dyads triads network, although reciprocated ties seem bit likely. reassuring. tentative conclusion relatively sparse large networks ‘matter’ disregard simultaneous tie changes. forms coordination (weak strict) lead reciprocated ties. dyad triad census networks simulated assuming ‘weak coordination’ deviate simulated networks. assumption made weak coordination also actors connected time t0 can initiate coordinated tie-change. Hence, called weak coordination. However, actors evaluate twostep tie changes lead connection time t2. words, choice set reduced. strict coordination, assumed actors connected time t0 can start coordination. Hence, called strict coordination. actors evaluate twostep tie changes (also result two independent ministeps). ABM specified strict coordination (parameter p2step=1). probably mean actors made lot tie-changes others. may worthwhile mix twosteps ministeps.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"data-sets","dir":"Articles","previous_headings":"","what":"1. Data sets","title":"Introduction_RsienaTwoStep","text":"Let us look build-data sets RsienaTwoStep.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"adjacency-matrix","dir":"Articles","previous_headings":"1. Data sets > 1.1. ts_net1","what":"1.1.1. Adjacency matrix","title":"Introduction_RsienaTwoStep","text":"","code":"ts_net1 #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"plot","dir":"Articles","previous_headings":"1. Data sets > 1.1. ts_net1","what":"1.1.2. Plot","title":"Introduction_RsienaTwoStep","text":"Figure 1.1.2. ts_net1","code":"net1g <- igraph::graph_from_adjacency_matrix(ts_net1, mode=\"directed\") par(mar=c(.1, .1, .1, .1)) igraph::plot.igraph(net1g)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"adjacency-matrix-1","dir":"Articles","previous_headings":"1. Data sets > 1.2. ts_net2","what":"1.2.1. Adjacency matrix","title":"Introduction_RsienaTwoStep","text":"","code":"ts_net2 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"plot-1","dir":"Articles","previous_headings":"1. Data sets > 1.2. ts_net2","what":"1.2.2. Plot","title":"Introduction_RsienaTwoStep","text":"Figure 1.2.2. ts_net2","code":"net2g <- igraph::graph_from_adjacency_matrix(ts_net2, mode=\"directed\") par(mar=c(.1, .1, .1, .1)) igraph::plot.igraph(net2g)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"logic","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.1. Logic","title":"Introduction_RsienaTwoStep","text":"sample ego construct possible alternative future networks based possible ministeps ego calculate sampled ego evaluates possible networks Let ego pick network, , let agent decide tie-change GOTO 1 (STOPPING RULE: think made enough ministeps)","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"possible-networks-after-ministep","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.2. Possible networks after ministep","title":"Introduction_RsienaTwoStep","text":"Let us suppose want know possible networks possible ministeps one actor part ts_net2. , let us assume ego#2’s turn decide tie-change. possible networks? ts_alternatives_ministep() returns list possible networks possible tie-changes available ego#2 given network ts_net2. look closely see options[[2]] equals original network (.e. ego#2 decided change tie).","code":"options <- ts_alternatives_ministep(net=ts_net2, ego=2) options #> [[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    1    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    1    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"network-statistics","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.3. Network statistics","title":"Introduction_RsienaTwoStep","text":"option ego#2 choose? Naturally depend network characteristics (statistics) ego#2 finds relevant. Let us suppose ego#2 bases decision solely number ties sends others number reciprocated ties others. Let us count number ties ego#2 sends alters. second (original) option: package RsienaTwoStep functions following network statistics \\(s\\): degree: ts_degree() reciprocity: ts_recip() outdegree activity: ts_outAct() indegree activity: ts_inAct() outdegree popularity: ts_outPop() indegree popularity: ts_inPop() transitivity: ts_transTrip() mediated transitivity: ts_transMedTrip() transitive reciprocated triplets: ts_transRecTrip() number three-cycles: ts_cycle3() See Ripley et al. (2022) (Chapter 12) mathematical formulation. Naturally, free define network statistics.","code":"ts_degree(net=options[[1]], ego=2) #> [1] 2 ts_degree(net=options[[2]], ego=2) #> [1] 1"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"evaluation-function","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.4. Evaluation function","title":"Introduction_RsienaTwoStep","text":"evaluation value ego#2 attach network statistics consequently network (vicinity) whole? Well parameters, \\(\\beta\\), normally estimate RSiena::siena07(). Let us suppose importance statistic ‘degree’ -1 statistic ‘reciprocity’ 2. calculate evaluation network saved options[[2]] hand: \\[f^{eval}_{n}(\\mathbf{s_{}},\\mathbf{\\beta}) = \\mathbf{s_i}^\\mathsf{T}\\mathbf{\\beta}, \\] \\(f^{eval}_{n}\\) evaluation function agent \\(n\\). \\(\\mathbf{s_{}}\\) network statistics network \\(\\) \\(\\mathbf{\\beta}\\) corresponding parameters (importance). little help network statistic functions: use ts_eval(). Now, let us calculate evaluation 5 possible networks:","code":"1*-1 + 0*2 #> [1] -1 ts_degree(net=options[[2]], ego=2)*-1 + ts_recip(net=options[[2]], ego=2)*2 #> [1] -1 eval <- ts_eval(net=options[[2]], ego=2, statistics=list(ts_degree, ts_recip), parameters=c(-1,2)) eval #> [1] -1 eval <- sapply(options, FUN=ts_eval, ego=2, statistics=list(ts_degree, ts_recip), parameters=c(-1,2)) eval #> [1] -2 -1 -2 -2  0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"choice-function","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.5. Choice function","title":"Introduction_RsienaTwoStep","text":"option ego#2 choose? Naturally stochastic process. see last option highest evaluation. use McFadden’s choice function (information see wiki), let \\(P_{ni}\\) probability ego \\(n\\) chooses network/alternative \\(\\). choice function given : \\[P_{n,} = \\frac{exp(\\mathbf{s_i}^\\mathsf{T}\\mathbf{\\beta} )}{\\Sigma_{j=1}^J exp(\\mathbf{s_j}^\\mathsf{T}\\mathbf{\\beta} )},\\] \\(s_i\\) vector value network statistics network \\(\\) \\(\\beta\\) vector parameter values. Hence, \\(\\mathbf{s_i}^\\mathsf{T}\\mathbf{\\beta}\\) value evaluation network \\(\\). Let us force ego#2 make decision. repeat process, …: sample agent construct possible alternative networks calculate sampled agent evaluates possible networks Let agent pick network, , let agent decide tie-change GO BACK 1 (STOPPING RULE: think made enough ministeps) …agent based model.","code":"choice <- sample(1:length(eval), size=1, prob=exp(eval)/sum(exp(eval))) print(\"choice:\")  choice print(\"network:\") options[[choice]] #> [1] \"choice:\" #> [1] 5 #> [1] \"network:\" #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"stopping-rule","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.6. Stopping rule","title":"Introduction_RsienaTwoStep","text":"many ministeps allow? Well, normally estimated siena07 rate parameter. make rate parameter conditional actor covariates network characteristics, rate parameter can interpreted average number ministeps actor network allowed make time . Let us suppose rate parameter 2 . Thus total number possible ministeps nrow(ts_net2)*rate: 10. detailed - correct - interpretation rate parameter siena07 see: www.jochemtolsma.nl.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"example","dir":"Articles","previous_headings":"2. ABM ministep","what":"2.7. Example","title":"Introduction_RsienaTwoStep","text":"demonstrate network evolution:","code":"#in startvalues the first value refers to the rate parameter, the subsequent values to the statistics of statistics ts_sims(startvalues = c(2,-1,2), net1=ts_net2, statistics=list(ts_degree, ts_recip),nsims=1, p2step=c(1,0,0), chain = TRUE ) #> [1] \"nsim: 1\" #> [[1]] #> [[1]]$final #> [[1]]$final$net_n #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #>  #> [[1]]$chain #> [[1]]$chain$nets #> [[1]]$chain$nets[[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[1]]$chain$nets[[6]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #> [[1]]$chain$nets[[7]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    1    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #> [[1]]$chain$nets[[8]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #> [[1]]$chain$nets[[9]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[10]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"logic-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.1. Logic","title":"Introduction_RsienaTwoStep","text":"general logic ABM allows twosteps similar ABM ministep model: sample two agents construct possible alternative networks calculate sampled agents evaluate possible networks Let agents together pick subsequent network, , let agents decide twostep (simultaneous two ministeps) GOTO 1 (STOPPING RULE: think made enough ministeps/twosteps)","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"sample-two-agents","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.2. Sample two agents","title":"Introduction_RsienaTwoStep","text":"Simultaneity: agents sampled randomly Strict coordination: specific dyads sampled (specific distance , based either -, - reciprocal ties) Weak coordination: agents sampled randomly specific twosteps regarded ‘coordinated’ twosteps , consequently possible alternative networks included choice set dyad.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"possible-networks-after-twostep","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.3. Possible networks after twostep","title":"Introduction_RsienaTwoStep","text":"want allow simultaneity, simply let first agent1 make possible ministeps conditional alternative networks let agent2 make possible ministeps. Please note order let agents make ministeps important. simple construct networks result agent1 agent2 make simultaneous ministep. Exception: weak coordination assess possible alternative networks impact evaluation function egos. possible alternative networks regarded result coordination included choice set. Thus, necessarry ego1 ego2 connected time1 least connected time2 way influence others evaluation function. implementation current version RsieneTwoStep , however, bit different. weak coordination simple assess distance ego1 ego2 time1 time2. eithter time1 time2 distance within set threshold, regard twostep coordinated twostep.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"network-statistics-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.4. Network statistics","title":"Introduction_RsienaTwoStep","text":"use network statistics ABM ministep. please note, existing network statistics RSiena make sense. See example figure . Suppose evaluation transitive triad actor depends whether path j closing path (.e., created path h j) . twostep, ties may created simultaneously distinguish two routes. Figure 3.4. Twostep versus ministeps note: Dashed arrows represent ministeps (long dash) twostep (short dash); solid arrows represent initial ties (grey) created ties (red).","code":"#> Warning: `layout.grid()` was deprecated in igraph 2.0.0. #> ℹ Please use `layout_on_grid()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"evaluation-function-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.5. Evaluation function","title":"Introduction_RsienaTwoStep","text":"start letting involved agent evaluate possible networks based individual evaluation functions. Thus agent1 gives evaluation agent2 gives evaluation. Next decide combine separate evaluations two agents. now, RsienaTwoStep, simply take mean two separate evaluations final evaluation score. \\[f^{eval}_{nm}(\\mathbf{s_{}},\\mathbf{\\beta}) = f^{eval}_{n}(\\mathbf{s_{}},\\mathbf{\\beta})  + f^{eval}_{m}(\\mathbf{s_{}},\\mathbf{\\beta})\\]","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"choice-function-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.6. Choice function","title":"Introduction_RsienaTwoStep","text":"follow logic . know evaluation score network simply apply Mc Fadden’s choice function. , actors together ‘decide’ future network possible alternative networks choice set, given combined evaluation networks. Thus see dyad formed agent1 agent2 decision agent. Please note agents (rather dyad) thus favor network highest combined ‘utility’ score. necessarily network give one two agents highest satisfaction. \\[P_{nm,} = \\frac{exp(f^{eval}_{n}(\\mathbf{s_{}},\\mathbf{\\beta}) + f^{eval}_{m}(\\mathbf{s_{}},\\mathbf{\\beta})) }{\\Sigma_{j=1}^J exp(f^{eval}_{n}(\\mathbf{s_{j}},\\mathbf{\\beta}) + f^{eval}_{m}(\\mathbf{s_{j}},\\mathbf{\\beta}))},\\]","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"stopping-rule-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.7. Stopping rule","title":"Introduction_RsienaTwoStep","text":"logic exactly similar. However, count twostep two ministeps. Thus, actor allowed make average 8 ministeps, actors allowed make average 4 twosteps.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"example-1","dir":"Articles","previous_headings":"3. ABM twostep","what":"3.8. Example","title":"Introduction_RsienaTwoStep","text":"","code":"ts_sims(startvalues = c(2,-1,2), net1=ts_net2, statistics=list(ts_degree, ts_recip),nsims=1, p2step=c(0,1,0), chain = TRUE ) #> [1] \"nsim: 1\" #> [[1]] #> [[1]]$final #> [[1]]$final$net_n #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    1    1    1 #> [3,]    0    1    0    0    0 #> [4,]    0    1    1    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[1]]$chain #> [[1]]$chain$nets #> [[1]]$chain$nets[[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    1    1 #> [3,]    1    0    0    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    1    1 #> [3,]    0    0    0    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[1]]$chain$nets[[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    1    1 #> [3,]    0    0    0    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    1    1 #> [3,]    0    0    0    0    0 #> [4,]    0    1    1    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    1    1    1 #> [3,]    0    1    0    0    0 #> [4,]    0    1    1    0    0 #> [5,]    0    0    0    0    0"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"logic-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.1. Logic","title":"Introduction_RsienaTwoStep","text":"second way ministep assumption can relaxed allow actor make two ministeps simultaneously. Suppose triad formed actors , j h tie h j. Figure 4.1. Simstep versus ministeps note: Dashed arrows represent ministeps (long dash) simstep (short dash); solid arrows represent initial ties (grey) created ties (red). Suppose, actors evaluate transitive triplet structures positively. Normally, ministep assumption, actor first make tie actor h (j) turn make tie change, make tie actor j (h). Naturally, larger networks lot happened mean time. Given network structure time, actor allowed make second ministep, actor may favor making additional tie actor j (h) anymore. Also, actor may even want create tie actor h j already sure can close triad immediately afterwards (even simultaneously). Naturally, real life situations, strange create multiple ties (almost) time. See example paper impact Kudos running behavior (Franken, Bekhuis, Tolsma 2023). Strava (social media matter), common give multiple kudos (likes) different people network - less - time.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"possible-networks-after-simstep","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.2. Possible networks after simstep","title":"Introduction_RsienaTwoStep","text":"Simply networks arise two sequential ministeps made one actor (including change option). Please note choice set contains unique network configurations.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"network-statistics-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.3. Network statistics","title":"Introduction_RsienaTwoStep","text":"use network statistics ABM ministep. please note, existing network statistics RSiena make sense. See example Figure 4.1. . Suppose evaluation transitive triad actor depends whether path j closing path path h. simstep, ties may created simultaneously distinguish two routes.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"evaluation-function-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.4. Evaluation function","title":"Introduction_RsienaTwoStep","text":"Identical ABM ministep.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"choice-function-","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.5. Choice function.","title":"Introduction_RsienaTwoStep","text":"Identical ABM ministep.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"stopping-rule-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.6. Stopping rule","title":"Introduction_RsienaTwoStep","text":"logic exactly similar. However, count simstep two ministeps. Thus actor allowed make average 8 ministeps, actors allowed make average 4 simsteps.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"example-2","dir":"Articles","previous_headings":"4. ABM simstep","what":"4.7. Example","title":"Introduction_RsienaTwoStep","text":"","code":"ts_sims(startvalues = c(2,-2,2,2), net1=ts_net2, statistics=list(ts_degree, ts_recip, ts_outAct),nsims=1, p2step=c(0,0,1), chain = TRUE ) #> [1] \"nsim: 1\" #> [[1]] #> [[1]]$final #> [[1]]$final$net_n #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    0    1    1    1 #> [3,]    1    1    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    0    1    1    0    0 #>  #>  #> [[1]]$chain #> [[1]]$chain$nets #> [[1]]$chain$nets[[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    1    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    0    1    0    1 #> [3,]    1    1    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[1]]$chain$nets[[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    0    1    0    1 #> [3,]    1    1    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    0    1    1    0    0 #>  #> [[1]]$chain$nets[[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    0    1    1    1 #> [3,]    1    1    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    0    1    1    0    0 #>  #> [[1]]$chain$nets[[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    0    1    1    1 #> [3,]    1    1    0    1    0 #> [4,]    0    0    0    0    0 #> [5,]    0    1    1    0    0"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"simulate-networks","dir":"Articles","previous_headings":"5. Network census","what":"5.1. Simulate networks","title":"Introduction_RsienaTwoStep","text":"Let us simulate 100 times outcome ABM twostep process save final network","code":"nets <- ts_sims(startvalues = c(2,-2,2,2), net=ts_net2, statistics=list(ts_degree, ts_recip, ts_outAct),nsims=100, p2step=c(0,1,0), chain = FALSE, verbose = FALSE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"dyad-and-triad-configurations","dir":"Articles","previous_headings":"5. Network census","what":"5.2. Dyad and triad configurations","title":"Introduction_RsienaTwoStep","text":"Now want count dyad triad configurations.","code":"df_dyads <- ts_dyads(nets, forplot = FALSE, simtype=\"twostep: random\")   df_triads <- ts_triads(nets, forplot = FALSE, simtype=\"twostep: random\") df_dyads df_triads #>     Mut Asym Null            type #> 1     5    2    3 twostep: random #> 2     4    4    2 twostep: random #> 3     3    6    1 twostep: random #> 4     4    4    2 twostep: random #> 5     4    4    2 twostep: random #> 6     4    4    2 twostep: random #> 7     4    2    4 twostep: random #> 8     5    2    3 twostep: random #> 9     4    4    2 twostep: random #> 10    5    2    3 twostep: random #> 11    5    2    3 twostep: random #> 12    4    4    2 twostep: random #> 13    3    6    1 twostep: random #> 14    4    4    2 twostep: random #> 15    5    2    3 twostep: random #> 16    6    0    4 twostep: random #> 17    4    4    2 twostep: random #> 18    5    2    3 twostep: random #> 19    4    3    3 twostep: random #> 20    2    7    1 twostep: random #> 21    4    4    2 twostep: random #> 22    4    3    3 twostep: random #> 23    4    4    2 twostep: random #> 24    4    4    2 twostep: random #> 25    5    2    3 twostep: random #> 26    5    2    3 twostep: random #> 27    5    2    3 twostep: random #> 28    6    0    4 twostep: random #> 29    5    2    3 twostep: random #> 30    4    2    4 twostep: random #> 31    4    3    3 twostep: random #> 32    4    3    3 twostep: random #> 33    4    4    2 twostep: random #> 34    4    4    2 twostep: random #> 35    5    2    3 twostep: random #> 36    4    3    3 twostep: random #> 37    4    4    2 twostep: random #> 38    5    2    3 twostep: random #> 39    5    2    3 twostep: random #> 40    5    1    4 twostep: random #> 41    5    1    4 twostep: random #> 42    3    5    2 twostep: random #> 43    4    3    3 twostep: random #> 44    6    0    4 twostep: random #> 45    5    2    3 twostep: random #> 46    3    6    1 twostep: random #> 47    4    4    2 twostep: random #> 48    5    2    3 twostep: random #> 49    4    4    2 twostep: random #> 50    4    4    2 twostep: random #> 51    4    4    2 twostep: random #> 52    4    4    2 twostep: random #> 53    4    3    3 twostep: random #> 54    3    6    1 twostep: random #> 55    5    2    3 twostep: random #> 56    5    2    3 twostep: random #> 57    6    0    4 twostep: random #> 58    3    5    2 twostep: random #> 59    5    2    3 twostep: random #> 60    5    2    3 twostep: random #> 61    4    3    3 twostep: random #> 62    4    4    2 twostep: random #> 63    3    6    1 twostep: random #> 64    5    2    3 twostep: random #> 65    5    2    3 twostep: random #> 66    6    0    4 twostep: random #> 67    4    3    3 twostep: random #> 68    5    2    3 twostep: random #> 69    5    2    3 twostep: random #> 70    5    2    3 twostep: random #> 71    5    2    3 twostep: random #> 72    4    3    3 twostep: random #> 73    4    3    3 twostep: random #> 74    4    2    4 twostep: random #> 75    6    0    4 twostep: random #> 76    4    4    2 twostep: random #> 77    4    4    2 twostep: random #> 78    5    2    3 twostep: random #> 79    4    4    2 twostep: random #> 80    5    2    3 twostep: random #> 81    4    3    3 twostep: random #> 82    5    2    3 twostep: random #> 83    3    6    1 twostep: random #> 84    5    2    3 twostep: random #> 85    5    2    3 twostep: random #> 86    5    2    3 twostep: random #> 87    4    4    2 twostep: random #> 88    5    2    3 twostep: random #> 89    5    2    3 twostep: random #> 90    4    4    2 twostep: random #> 91    4    3    3 twostep: random #> 92    5    2    3 twostep: random #> 93    5    2    3 twostep: random #> 94    5    2    3 twostep: random #> 95    4    3    3 twostep: random #> 96    5    2    3 twostep: random #> 97    4    3    3 twostep: random #> 98    5    2    3 twostep: random #> 99    5    2    3 twostep: random #> 100   4    4    2 twostep: random #>     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U 120C 210 300 #> 1     0   1   1    0    0    0    0    2    0    0   3    0    0    0   3   0 #> 2     0   0   0    0    1    0    1    2    1    0   2    0    0    1   2   0 #> 3     0   0   0    2    0    0    0    1    2    0   0    0    2    0   3   0 #> 4     0   0   0    0    1    1    0    2    0    0   2    0    2    0   2   0 #> 5     0   1   0    1    0    0    0    2    0    0   1    0    3    0   1   1 #> 6     0   1   0    0    0    0    0    3    0    0   1    1    1    1   2   0 #> 7     1   1   1    0    0    0    0    3    0    0   2    0    1    0   0   1 #> 8     0   1   2    0    0    0    0    1    0    0   2    0    1    0   2   1 #> 9     0   0   0    0    0    0    2    4    0    0   0    1    1    1   0   1 #> 10    1   0   0    0    0    0    0    4    0    0   2    0    0    0   2   1 #> 11    0   1   2    0    0    0    0    3    0    0   0    0    0    0   2   2 #> 12    0   0   1    0    0    2    0    1    0    0   1    0    1    1   3   0 #> 13    0   0   0    0    0    1    1    0    2    0   1    0    2    2   1   0 #> 14    0   0   0    0    0    2    1    2    0    0   1    0    1    1   1   1 #> 15    0   0   2    0    0    0    3    1    0    0   1    0    0    0   2   1 #> 16    0   0   3    0    0    0    0    0    0    0   6    0    0    0   0   1 #> 17    0   0   0    0    0    1    1    2    1    0   2    0    0    1   2   0 #> 18    0   1   1    0    0    0    0    3    0    0   2    0    1    0   0   2 #> 19    0   1   1    0    0    1    2    0    0    0   2    0    1    0   2   0 #> 20    0   0   0    1    0    1    1    0    2    1   0    0    2    1   1   0 #> 21    0   0   0    0    0    0    2    4    1    0   0    0    0    0   3   0 #> 22    0   1   0    0    0    0    2    3    0    0   2    0    1    0   1   0 #> 23    0   1   0    1    0    0    0    2    0    0   1    0    1    1   3   0 #> 24    0   0   1    0    1    0    1    2    1    0   0    0    1    0   2   1 #> 25    0   0   1    0    0    0    2    2    0    0   3    0    0    0   2   0 #> 26    0   1   0    0    0    0    1    1    0    0   5    0    1    0   1   0 #> 27    0   0   2    0    0    0    1    2    0    0   2    0    1    0   1   1 #> 28    1   0   2    0    0    0    0    0    0    0   5    0    0    0   0   2 #> 29    0   0   2    0    0    1    1    1    0    0   2    0    0    0   2   1 #> 30    1   1   1    0    0    0    0    4    0    0   1    0    0    0   1   1 #> 31    1   0   0    1    0    0    0    4    0    0   1    0    1    0   1   1 #> 32    0   1   1    1    0    0    0    3    0    0   1    0    1    0   1   1 #> 33    0   0   0    0    1    1    1    2    0    0   1    1    0    1   1   1 #> 34    0   1   0    0    0    0    0    3    1    0   1    0    2    0   1   1 #> 35    0   0   1    0    0    0    2    3    0    0   2    0    0    0   1   1 #> 36    0   1   1    0    0    1    0    2    0    0   2    0    1    1   0   1 #> 37    0   0   1    0    0    1    0    3    1    0   0    0    1    0   2   1 #> 38    0   0   2    1    0    0    0    2    0    0   2    0    0    0   2   1 #> 39    0   2   0    0    0    0    1    1    0    0   3    0    0    0   2   1 #> 40    1   0   2    0    0    0    0    2    0    0   3    0    0    0   1   1 #> 41    1   0   2    0    0    0    0    2    0    0   3    0    0    0   1   1 #> 42    0   0   0    2    2    0    0    1    0    0   1    0    2    0   2   0 #> 43    0   2   0    0    0    0    1    2    0    0   2    0    0    1   2   0 #> 44    0   0   4    0    0    0    0    0    0    0   4    0    0    0   0   2 #> 45    0   1   2    0    0    0    0    1    0    0   2    0    0    1   2   1 #> 46    0   0   0    0    1    0    0    2    2    0   0    0    4    0   0   1 #> 47    0   1   0    0    0    0    0    3    1    0   1    0    2    0   1   1 #> 48    0   2   1    0    0    0    0    0    0    0   3    0    0    1   2   1 #> 49    0   0   0    0    0    0    2    4    0    0   0    1    2    0   0   1 #> 50    0   0   1    1    0    0    2    1    0    0   0    0    1    1   3   0 #> 51    0   0   0    0    1    0    2    2    0    0   1    1    1    0   2   0 #> 52    0   0   1    1    0    1    0    2    0    0   0    0    1    0   4   0 #> 53    0   2   0    0    0    0    0    4    0    0   1    0    1    0   1   1 #> 54    0   0   0    1    0    1    0    1    1    0   0    0    3    1   2   0 #> 55    0   0   1    0    0    1    2    2    0    0   2    0    0    0   0   2 #> 56    0   1   1    0    0    0    1    2    0    0   2    0    0    1   0   2 #> 57    1   0   2    0    0    0    0    0    0    0   5    0    0    0   0   2 #> 58    0   1   0    0    2    0    0    1    1    0   1    0    1    1   2   0 #> 59    0   1   0    0    0    0    2    1    0    0   4    0    0    0   2   0 #> 60    0   0   2    0    1    0    1    0    0    0   3    0    0    0   3   0 #> 61    1   0   0    0    0    0    2    2    0    0   2    1    1    0   1   0 #> 62    0   0   0    0    1    0    0    4    1    0   1    0    1    0   1   1 #> 63    0   0   0    0    1    0    1    0    2    0   1    0    3    1   1   0 #> 64    0   0   2    0    0    0    1    3    0    0   1    0    0    0   2   1 #> 65    0   1   1    0    0    0    1    1    0    0   3    0    1    0   1   1 #> 66    0   0   4    0    0    0    0    0    0    0   4    0    0    0   0   2 #> 67    0   2   0    0    0    0    0    4    0    0   1    0    1    0   1   1 #> 68    0   1   1    0    1    0    0    1    0    0   3    0    0    0   2   1 #> 69    0   1   1    0    0    1    0    1    0    0   3    0    0    0   2   1 #> 70    0   1   0    0    0    0    1    2    0    0   4    0    0    0   2   0 #> 71    0   1   1    1    0    0    1    0    0    0   3    0    0    0   2   1 #> 72    0   1   0    1    0    0    2    1    0    0   3    0    0    1   1   0 #> 73    0   0   3    1    0    1    0    1    0    0   0    0    0    1   2   1 #> 74    1   0   2    1    0    0    0    3    0    0   1    0    0    0   1   1 #> 75    0   0   4    0    0    0    0    0    0    0   4    0    0    0   0   2 #> 76    0   0   0    0    0    2    1    2    0    0   1    0    1    0   3   0 #> 77    0   0   1    1    0    1    0    2    0    0   0    0    1    0   4   0 #> 78    0   2   1    0    0    0    0    0    0    0   3    0    1    0   2   1 #> 79    0   1   0    1    0    0    0    2    0    0   1    0    3    0   1   1 #> 80    0   1   1    0    0    0    0    2    0    0   3    0    0    0   3   0 #> 81    0   1   1    0    0    1    1    2    0    0   1    0    0    0   3   0 #> 82    0   1   0    0    0    0    1    1    0    0   5    0    1    0   1   0 #> 83    0   0   0    1    0    0    1    1    1    0   0    2    3    0   1   0 #> 84    0   1   0    0    0    0    1    1    0    0   5    1    0    0   1   0 #> 85    0   1   1    0    0    0    0    3    0    0   2    0    1    0   0   2 #> 86    1   0   0    0    0    0    0    4    0    0   2    0    0    0   2   1 #> 87    0   1   0    1    0    0    0    1    0    0   2    0    1    2   2   0 #> 88    0   1   1    0    0    0    0    3    0    0   2    0    0    0   2   1 #> 89    1   0   0    0    0    0    0    4    0    0   2    0    0    0   2   1 #> 90    0   0   1    2    0    0    0    1    0    0   1    1    1    0   3   0 #> 91    0   0   2    0    0    0    1    3    1    0   1    0    0    0   2   0 #> 92    0   1   2    0    0    0    0    1    0    0   2    0    1    0   2   1 #> 93    1   0   0    0    0    0    0    4    0    0   2    0    1    0   0   2 #> 94    0   0   2    0    0    1    0    1    0    0   3    0    0    0   3   0 #> 95    0   2   0    0    0    0    0    4    0    0   1    0    1    0   1   1 #> 96    0   1   1    0    0    0    0    3    0    0   2    0    0    0   2   1 #> 97    0   1   1    0    0    1    0    3    0    0   1    0    1    0   1   1 #> 98    1   0   0    0    0    0    0    4    0    0   2    0    1    0   0   2 #> 99    0   1   1    0    0    0    0    3    0    0   2    0    0    0   2   1 #> 100   0   1   0    0    0    0    0    2    0    0   2    1    1    2   1   0 #>                type #> 1   twostep: random #> 2   twostep: random #> 3   twostep: random #> 4   twostep: random #> 5   twostep: random #> 6   twostep: random #> 7   twostep: random #> 8   twostep: random #> 9   twostep: random #> 10  twostep: random #> 11  twostep: random #> 12  twostep: random #> 13  twostep: random #> 14  twostep: random #> 15  twostep: random #> 16  twostep: random #> 17  twostep: random #> 18  twostep: random #> 19  twostep: random #> 20  twostep: random #> 21  twostep: random #> 22  twostep: random #> 23  twostep: random #> 24  twostep: random #> 25  twostep: random #> 26  twostep: random #> 27  twostep: random #> 28  twostep: random #> 29  twostep: random #> 30  twostep: random #> 31  twostep: random #> 32  twostep: random #> 33  twostep: random #> 34  twostep: random #> 35  twostep: random #> 36  twostep: random #> 37  twostep: random #> 38  twostep: random #> 39  twostep: random #> 40  twostep: random #> 41  twostep: random #> 42  twostep: random #> 43  twostep: random #> 44  twostep: random #> 45  twostep: random #> 46  twostep: random #> 47  twostep: random #> 48  twostep: random #> 49  twostep: random #> 50  twostep: random #> 51  twostep: random #> 52  twostep: random #> 53  twostep: random #> 54  twostep: random #> 55  twostep: random #> 56  twostep: random #> 57  twostep: random #> 58  twostep: random #> 59  twostep: random #> 60  twostep: random #> 61  twostep: random #> 62  twostep: random #> 63  twostep: random #> 64  twostep: random #> 65  twostep: random #> 66  twostep: random #> 67  twostep: random #> 68  twostep: random #> 69  twostep: random #> 70  twostep: random #> 71  twostep: random #> 72  twostep: random #> 73  twostep: random #> 74  twostep: random #> 75  twostep: random #> 76  twostep: random #> 77  twostep: random #> 78  twostep: random #> 79  twostep: random #> 80  twostep: random #> 81  twostep: random #> 82  twostep: random #> 83  twostep: random #> 84  twostep: random #> 85  twostep: random #> 86  twostep: random #> 87  twostep: random #> 88  twostep: random #> 89  twostep: random #> 90  twostep: random #> 91  twostep: random #> 92  twostep: random #> 93  twostep: random #> 94  twostep: random #> 95  twostep: random #> 96  twostep: random #> 97  twostep: random #> 98  twostep: random #> 99  twostep: random #> 100 twostep: random"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/Introduction_RsienaTwoStep.html","id":"violin-plots","dir":"Articles","previous_headings":"5. Network census","what":"5.3. Violin plots","title":"Introduction_RsienaTwoStep","text":"want make violin plots census, best set option forplot TRUE. Just example: Figure 5.3. Dyad census","code":"df_dyads2 <- ts_dyads(nets, forplot = TRUE, simtype=\"twostep: random\") library(ggplot2) p <- ggplot(df_dyads2, aes(x=x, y=y, fill=type)) +    geom_violin(position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(1)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(1)) +    xlab('dyad configuration') + ylab('count')    p"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"1. Getting started","title":"MinistepToTwostep","text":"","code":"rm(list=ls())"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"basic-functions","dir":"Articles","previous_headings":"1. Getting started","what":"1.1. Basic functions","title":"MinistepToTwostep","text":"","code":"fsave <- function(x, file, location = \"./data/processed/\", ...) {     if (!dir.exists(location))         dir.create(location)     datename <- substr(gsub(\"[:-]\", \"\", Sys.time()), 1, 8)     totalname <- paste(location, datename, file, sep = \"\")     print(paste(\"SAVED: \", totalname, sep = \"\"))     save(x, file = totalname) }  fpackage.check <- function(packages) {     lapply(packages, FUN = function(x) {         if (!require(x, character.only = TRUE)) {             install.packages(x, dependencies = TRUE)             library(x, character.only = TRUE)         }     }) }  colorize <- function(x, color) {     sprintf(\"<span style='color: %s;'>%s<\/span>\", color, x) }"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"packages","dir":"Articles","previous_headings":"1. Getting started","what":"1.2. Packages","title":"MinistepToTwostep","text":"","code":"packages = c(\"RsienaTwoStep\", \"doParallel\", \"ggplot2\")  fpackage.check(packages) #> Loading required package: RsienaTwoStep #> Loading required package: foreach #> Loading required package: doParallel #> Loading required package: iterators #> Loading required package: parallel #> Loading required package: ggplot2 #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> NULL"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"setting-up-cluster","dir":"Articles","previous_headings":"","what":"2. Setting up cluster","title":"MinistepToTwostep","text":"","code":"no_cores <- detectCores() - 1 mycl <- makeCluster(rep(\"localhost\", no_cores)) clusterEvalQ(mycl, library(RsienaTwoStep))  registerDoParallel(mycl) #stopCluster(mycl)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"model-1-degree-and-reciprocity","dir":"Articles","previous_headings":"3. Running simulations on toy data","what":"3.1. Model 1: Degree and reciprocity","title":"MinistepToTwostep","text":"Let us assume people really don’t like non-reciprocal tie like reciprocal ties lot. (want help help !) Thus start network without many (reciprocal) ties difficult get reciprocal ties normal model. However, simultaneity possible.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"simulate-networks","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.1. Model 1: Degree and reciprocity","what":"3.1.1. Simulate networks","title":"MinistepToTwostep","text":"","code":"NSIM <- 500 STATS <- list(ts_degree, ts_recip) STARTS <- c(10, -1,2)  sims1 <- ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(1,0,0), verbose  = FALSE, parallel = TRUE) #ministep  sims2 <- ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,1,0), verbose  = FALSE, parallel = TRUE) #twostep: simultaneity  sims3 <- ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,1,0), dist1 = 2, dist2 = 2, verbose  = FALSE, parallel = TRUE)   #twostep: weak coordination  sims4 <-  ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,1,0), dist1 = 2, verbose  = FALSE, parallel = TRUE)  #twostep: strict coordination  sims5 <-  ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,0,1), dist1 = 2, verbose  = FALSE, parallel = TRUE)  #simstep: one actor two ministeps"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"counting-dyads","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.1. Model 1: Degree and reciprocity","what":"3.1.2. Counting dyads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_dyads(sims=sims1, simtype=\"ministep\") df2 <- ts_dyads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_dyads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_dyads(sims=sims4, simtype=\"twostep: strict coordination\")   df5 <- ts_dyads(sims=sims5, simtype=\"simstep\")    df <- rbind(df1, df2, df3, df4, df5)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"plot-results-of-dyadcensus","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.1. Model 1: Degree and reciprocity","what":"3.1.3. Plot results of dyadcensus","title":"MinistepToTwostep","text":"Figure 3.1.3. Dyadcensus Model 1","code":"p <- ggplot(df, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep: simultaneity\", \"twostep: weak coordination\", \"twostep: strict coordination\", \"simstep\")))) +    geom_violin(position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.9)) +   labs(x = \"dyad type\", y = \"dyad count\", fill=\"simulation type\")    p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"conclusion","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.1. Model 1: Degree and reciprocity","what":"3.1.4. Conclusion","title":"MinistepToTwostep","text":"Yes, allow simultaneity, observe reciprocal ties number possible tie-changes. Perhaps model ministeps reach target values (dyads) probably using possible tie-changes. mean noise network chains, can/results network statistics. Also note, make network larger, simultaneity less likely different two consecutive ministeps, two agents influence others evaluation functions.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"model-2-degree-reciprocity-transtrip","dir":"Articles","previous_headings":"3. Running simulations on toy data","what":"3.2. Model 2: Degree, reciprocity, transTrip","title":"MinistepToTwostep","text":"Let us assume people really don’t like non-reciprocal tie like reciprocal ties lot favor transitivity. unlikely transitive triad emerge coordination, one actors evaluate transitive triad positively wrong position. , reciprocal ties likely actors coordinate, also observe transitive triads.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"simulate-networks-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.1. Simulate networks","title":"MinistepToTwostep","text":"","code":"NSIM <- 500 STATS <- list(ts_degree, ts_recip,ts_transTrip) STARTS <- c(10, -1, 2, 1)  sims1 <- ts_sims(startvalues = STARTS , net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(1,0,0), verbose  = FALSE, parallel = TRUE) #ministep  sims2 <- ts_sims(startvalues = STARTS , net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,1,0), verbose  = FALSE, parallel = TRUE) #twostep: simultaneity  sims3 <- ts_sims(startvalues = STARTS , net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,1,0), dist1 = 2, dist2 = 2, verbose  = FALSE, parallel = TRUE)   #twostep: weak coordination  sims4 <-  ts_sims(startvalues = STARTS , net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,1,0), dist1 = 2, verbose  = FALSE, parallel = TRUE)  #twostep: strict coordination  sims5 <-  ts_sims(startvalues = STARTS , net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,0,1), dist1 = 2, verbose  = FALSE, parallel = TRUE)  #simstep: one actor two ministeps"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"counting-dyads-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.2. Counting dyads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_dyads(sims=sims1, simtype=\"ministep\") df2 <- ts_dyads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_dyads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_dyads(sims=sims4, simtype=\"twostep: strict coordination\")   df5 <- ts_dyads(sims=sims5, simtype=\"simstep\")    df <- rbind(df1, df2, df3, df4, df5)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"plot-results-of-the-dyadcensus","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.3. Plot results of the dyadcensus","title":"MinistepToTwostep","text":"Figure 3.2.3. Dyadcensus Model 2","code":"p <- ggplot(df, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep: simultaneity\", \"twostep: weak coordination\", \"twostep: strict coordination\", \"simstep\")))) +    geom_violin(position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.9)) +   labs(x = \"dyad type\", y = \"dyad count\", fill=\"simulation type\")    p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"counting-triads","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.4. Counting triads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_triads(sims=sims1, simtype=\"ministep\") df2 <- ts_triads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_triads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_triads(sims=sims4, simtype=\"twostep: strict coordination\")   df5 <- ts_triads(sims=sims5, simtype=\"simstep\")    df <- rbind(df1, df2, df3, df4, df5)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"plot-results-of-the-triadcensus","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.5. Plot results of the triadcensus","title":"MinistepToTwostep","text":"Intermezzo different triad configurations may embed one transitive triads. quick count: 030T: 1 120U: 1 120D: 2 120C: 2 210: 4 300: 6 Figure 3.2.5a. Triadcensus Model 2 (Triads 030T & 120U)  Figure 3.2.5b. Triadcensus Model 2 (Triads 120D & 120C)  Figure 3.2.5c. Triadcensus Model 2 (Triads 210 & 300)","code":"dftest <- df[df$x==\"030T\" | df$x==\"120U\", ] p1 <- ggplot(dftest, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep: simultaneity\", \"twostep: weak coordination\", \"twostep: strict coordination\", \"simstep\")))) +    geom_violin(position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.9)) +   labs(x = \"triad type\", y = \"triad count\", fill=\"simulation type\")  p1 dftest <- df[df$x==\"120D\" | df$x==\"120C\" , ] p2 <- ggplot(dftest, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep: simultaneity\", \"twostep: weak coordination\", \"twostep: strict coordination\", \"simstep\")))) +    geom_violin(position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.9)) +   labs(x = \"triad type\", y = \"triad count\", fill=\"simulation type\")  p2 dftest <- df[df$x==\"210\" | df$x==\"300\" , ] p3 <- ggplot(dftest, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep: simultaneity\", \"twostep: weak coordination\", \"twostep: strict coordination\", \"simstep\")))) +    geom_violin(position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.9)) +   labs(x = \"triad type\", y = \"triad count\", fill=\"simulation type\")  p3"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"conclusion-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.2. Model 2: Degree, reciprocity, transTrip","what":"3.2.6. Conclusion","title":"MinistepToTwostep","text":"network (ts_net1) given network statistics degree, reciprocity transitivity… general conclusion type ABM impact dyad triad count simulation run. tentative conclusion weak coordination impacts (complex) triad configurations strict coordination, weak coordination asymmetric dyads plausible.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"model-3-degree-reciprocity-transtrip-transmedtrip","dir":"Articles","previous_headings":"3. Running simulations on toy data","what":"3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","title":"MinistepToTwostep","text":"Let us assume people really don’t like non-reciprocal tie like reciprocal ties lot favor transitivity. now likely transitive triad emerge coordination, one actors evaluate transTrip may positively evaluate transMedTrip positively.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"simulate-networks-2","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.1. Simulate networks","title":"MinistepToTwostep","text":"","code":"NSIM <- 500 STATS <- list(ts_degree, ts_recip, ts_transTrip, ts_transMedTrip) STARTS <- c(10, -2 ,1 ,2 ,2)  sims1 <- ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(1,0,0), verbose  = FALSE, parallel = TRUE) #ministep  sims2 <- ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,1,0), verbose  = FALSE, parallel = TRUE) #twostep: simultaneity  sims3 <- ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,1,0), dist1 = 2, dist2 = 2, verbose  = FALSE, parallel = TRUE)   #twostep: weak coordination  sims4 <-  ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,1,0), dist1 = 2, verbose  = FALSE, parallel = TRUE)  #twostep: strict coordination  sims5 <-  ts_sims(startvalues = STARTS, net = ts_net1, statistics = STATS, nsims = NSIM, p2step = c(0,0,1), dist1 = 2, verbose  = FALSE, parallel = TRUE)  #simstep: one actor two ministeps"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"counting-dyads-2","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.2. Counting dyads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_dyads(sims=sims1, simtype=\"ministep\") df2 <- ts_dyads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_dyads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_dyads(sims=sims4, simtype=\"twostep: strict coordination\")   df5 <- ts_dyads(sims=sims5, simtype=\"simstep\")   df <- rbind(df1, df2, df3, df4, df5)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"plot-results-of-the-dyadcensus-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.3. Plot results of the dyadcensus","title":"MinistepToTwostep","text":"Figure 3.3.3. Dyadcensus Model 3","code":"p <- ggplot(df, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep: simultaneity\", \"twostep: weak coordination\", \"twostep: strict coordination\", \"simstep\")))) +    geom_violin(position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.9)) +   labs(x = \"dyad type\", y = \"dyad count\", fill=\"simulation type\")    p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"counting-triads-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.4. Counting triads","title":"MinistepToTwostep","text":"","code":"df1 <- ts_triads(sims=sims1, simtype=\"ministep\") df2 <- ts_triads(sims=sims2, simtype=\"twostep: simultaneity\")   df3 <- ts_triads(sims=sims3, simtype=\"twostep: weak coordination\")   df4 <- ts_triads(sims=sims4, simtype=\"twostep: strict coordination\")   df5 <- ts_triads(sims=sims5, simtype=\"simstep\")    df <- rbind(df1, df2, df3, df4, df5)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"plot-results-of-the-triadcensus-1","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.5. Plot results of the triadcensus","title":"MinistepToTwostep","text":"Figure 3.3.5a. Triadcensus Model 3 (Triads 030T & 120U)  Figure 3.2.5b. Triadcensus Model 3 (Triads 120D & 120C)  Figure 3.2.5c. Triadcensus Model 3 (Triads 210 & 300)","code":"dftest <- df[df$x==\"030T\" | df$x==\"120U\", ] p1 <- ggplot(dftest, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep: simultaneity\", \"twostep: weak coordination\", \"twostep: strict coordination\", \"simstep\"))))+    geom_violin(position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.9)) +   labs(x = \"triad type\", y = \"triad count\", fill=\"simulation type\") p1 dftest <- df[df$x==\"120D\" | df$x==\"120C\" , ] p2 <- ggplot(dftest, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep: simultaneity\", \"twostep: weak coordination\", \"twostep: strict coordination\", \"simstep\")))) +    geom_violin(position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.9)) +   labs(x = \"triad type\", y = \"triad count\", fill=\"simulation type\") p2 dftest <- df[df$x==\"210\" | df$x==\"300\" , ] p3 <- ggplot(dftest, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep: simultaneity\", \"twostep: weak coordination\", \"twostep: strict coordination\", \"simstep\")))) +    geom_violin(position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.9)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.9)) +   labs(x = \"triad type\", y = \"triad count\", fill=\"simulation type\")  p3"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"conclusion-2","dir":"Articles","previous_headings":"3. Running simulations on toy data > 3.3. Model 3: Degree, reciprocity, transTrip, transMedTrip","what":"3.3.6. Conclusion","title":"MinistepToTwostep","text":"network (ts_net1) given network statistics degree, reciprocity, transitivity mediated transitivity… clearly strict coordination leads diverging dyad triad counts. tentatively conclude , expected, transitive triads common coordination. tentatively conclude especially strict coordination leads transitive triads (except triads 210 300).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/MinistepToTwoStep.html","id":"conclusion-3","dir":"Articles","previous_headings":"","what":"4. Conclusion","title":"MinistepToTwostep","text":"different ABMs may give different dyad triad count (given start network network statistics). ABM leads diverging dyad triad count depends included network statistics. difficult predict (complexity!) results ABMs diverge priori.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"1. Getting started","title":"RSienaWorkFlow","text":"","code":"rm(list=ls())"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"basic-functions","dir":"Articles","previous_headings":"1. Getting started","what":"1.1. Basic functions","title":"RSienaWorkFlow","text":"","code":"fsave <- function(x, file, location = \"./data/processed/\", ...) {     if (!dir.exists(location))         dir.create(location)     datename <- substr(gsub(\"[:-]\", \"\", Sys.time()), 1, 8)     totalname <- paste(location, datename, file, sep = \"\")     print(paste(\"SAVED: \", totalname, sep = \"\"))     save(x, file = totalname) }  fpackage.check <- function(packages) {     lapply(packages, FUN = function(x) {         if (!require(x, character.only = TRUE)) {             install.packages(x, dependencies = TRUE)             library(x, character.only = TRUE)         }     }) }  colorize <- function(x, color) {     sprintf(\"<span style='color: %s;'>%s<\/span>\", color, x) }  fshowdf <- function(x, ...) {     knitr::kable(x, digits = 3, \"html\", ...) %>%         kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %>%         kableExtra::scroll_box(width = \"100%\", height = \"600px\") }"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"packages","dir":"Articles","previous_headings":"1. Getting started","what":"1.2. Packages","title":"RSienaWorkFlow","text":"","code":"packages = c(\"RsienaTwoStep\", \"RSiena\", \"doParallel\", \"compiler\", \"ggplot2\", \"tidyverse\", \"kableExtra\")  fpackage.check(packages)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"setting-up-cluster","dir":"Articles","previous_headings":"","what":"2. Setting up cluster","title":"RSienaWorkFlow","text":"","code":"no_cores <- detectCores()  mycl <- makeCluster(rep(\"localhost\", no_cores)) clusterEvalQ(mycl, library(RsienaTwoStep))  clusterEvalQ(mycl, library(\"network\")) clusterEvalQ(mycl, library(\"RSiena\")) clusterEvalQ(mycl, library(\"sna\")) registerDoParallel(mycl) #stopCluster(cl = mycl)   #perhaps this is better (backend independent): # library(doFuture) # doFuture::registerDoFuture() # future::plan(\"multisession\", workers = detectCores() - 1) ## Explicitly close multisession workers by switching plan # plan(sequential)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"prepare-the-dataset","dir":"Articles","previous_headings":"3. Running Siena07()","what":"3.1. Prepare the dataset","title":"RSienaWorkFlow","text":"","code":"mynet <- sienaDependent(array(c(s501, s502), dim=c(50, 50, 2))) alcohol <- s50a smoke <- s50s smoke <- coCovar(smoke[, 1]) alcohol <- coCovar(alcohol[, 1]) mydata <- sienaDataCreate(mynet, smoke, alcohol)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"set-up-up-the-algorithm-","dir":"Articles","previous_headings":"3. Running Siena07()","what":"3.2. Set up up the algorithm.","title":"RSienaWorkFlow","text":"Set conditional FALSE, way estimate rate parameter able retrieve rate parameter estimate theta. Also set ‘findiff’ TRUE. RsienaTwoStep estimates derivatives (phase1 phase3) estimated using finite differences.","code":"myalgorithm <- sienaAlgorithmCreate(cond = FALSE, findiff = TRUE, projname=NULL)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"define-the-model","dir":"Articles","previous_headings":"3. Running Siena07()","what":"3.3. Define the model","title":"RSienaWorkFlow","text":"","code":"myeff <- getEffects(mydata) myeff <- includeEffects(myeff, cycle3, transTrip) #>   effectName          include fix   test  initialValue parm #> 1 transitive triplets TRUE    FALSE FALSE          0   0    #> 2 3-cycles            TRUE    FALSE FALSE          0   0 myeff <- includeEffects(myeff, egoX, altX, egoXaltX, interaction1 = \"alcohol\") #>   effectName                  include fix   test  initialValue parm #> 1 alcohol alter               TRUE    FALSE FALSE          0   0    #> 2 alcohol ego                 TRUE    FALSE FALSE          0   0    #> 3 alcohol ego x alcohol alter TRUE    FALSE FALSE          0   0 myeff <- includeEffects(myeff, simX, interaction1 = \"smoke\") #>   effectName       include fix   test  initialValue parm #> 1 smoke similarity TRUE    FALSE FALSE          0   0"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"estimate-the-model-","dir":"Articles","previous_headings":"3. Running Siena07()","what":"3.4. Estimate the model.","title":"RSienaWorkFlow","text":"let’s look","code":"ans3 <- siena07(myalgorithm, data=mydata, effects=myeff, batch=TRUE, returnDeps = TRUE) fsave(ans3, file=\"ans3.Rdata\") ans3 #> Estimates, standard errors and convergence t-ratios #>  #>                                       Estimate   Standard   Convergence  #>                                                    Error      t-ratio    #>   1. rate basic rate parameter mynet   6.2300  ( 1.0066   )    0.0453    #>   2. eval outdegree (density)         -2.5205  ( 0.1434   )    0.0172    #>   3. eval reciprocity                  2.0461  ( 0.2817   )   -0.0042    #>   4. eval transitive triplets          0.5426  ( 0.1728   )    0.0046    #>   5. eval 3-cycles                     0.0580  ( 0.3165   )    0.0103    #>   6. eval smoke similarity             0.4123  ( 0.2805   )   -0.0141    #>   7. eval alcohol alter               -0.0692  ( 0.0944   )    0.0433    #>   8. eval alcohol ego                  0.0382  ( 0.0932   )    0.0488    #>   9. eval alcohol ego x alcohol alter  0.0994  ( 0.0750   )   -0.0073    #>  #> Overall maximum convergence ratio:    0.0979  #>  #>  #> Total of 2695 iteration steps."},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"estimate-via-rsienatwostep","dir":"Articles","previous_headings":"","what":"4. Estimate via RsienaTwoStep","title":"RSienaWorkFlow","text":"First demonstrate can estimate model without using siena07().","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"prepare-the-dataset-1","dir":"Articles","previous_headings":"4. Estimate via RsienaTwoStep","what":"4.1. Prepare the dataset","title":"RSienaWorkFlow","text":"need set algorithm.","code":"DF <- data.frame(alcohol = s50a[, 1], smoke = s50s[, 1])"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"define-the-model-","dir":"Articles","previous_headings":"4. Estimate via RsienaTwoStep","what":"4.2. Define the model.","title":"RSienaWorkFlow","text":"Include names statistics list. aim use shortname effects listed RSiena model prefix “ts_” added . statistic requires covariate use list first element name statistic second element name covariate. name used dataset.","code":"STATS <- list(ts_degree,                ts_recip,                ts_transTrip,                ts_cycle3,                list(ts_simX, \"smoke\"),                list(ts_altX, \"alcohol\"),                list(ts_egoX, \"alcohol\"),                list(ts_egoXaltX, \"alcohol\"))"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"check-statistics","dir":"Articles","previous_headings":"4. Estimate via RsienaTwoStep > 4.2. Define the model.","what":"4.2.1. Check statistics","title":"RSienaWorkFlow","text":"brief intermezzo, check statistics programmed correctly comparing target values. Everything fine.","code":"t1 <- ts_targets(ans3) #target values calculated by `siena07()` t2 <- ts_targets(mydata=mydata, myeff=myeff) #target values calculated by RsienaTwoStep based on RSiena objects.  t3 <- ts_targets(net1 = s501, net2 = s502, statistics = STATS, ccovar = DF) #target values calculated by RsienaTwoStep based on RsienaTwoStep objects.  df <- data.frame(Siena_original = t1, ts_siena_objects = t2, ts_twostep_object = t3 ) rownames(df) <- names(t3) fshowdf(df)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"estimate-parameters-","dir":"Articles","previous_headings":"4. Estimate via RsienaTwoStep > 4.3. Estimate model","what":"4.3.1. Estimate parameters.","title":"RSienaWorkFlow","text":"estimate parameters SE separately. means need set phase3 FALSE. also start data objects RSiena. Note still perform phase1 . also start result RSiena::siena07() estimation. now use final estimates starting values phase1 results phase3 stored ans. (less) similar using prevAns RSiena.","code":"ts_ans1a <- ts_estim(net1 = s501, net2= s502, statistics = STATS, ccovar = DF, parallel = TRUE, phase3 = FALSE) ts_ans1b <- ts_estim(mydata = mydata, myeff = myeff, parallel = TRUE, phase3 = FALSE) ts_ans1c <- ts_estim(ans = ans3, phase3 = FALSE, parallel = TRUE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"check-convergence-visually","dir":"Articles","previous_headings":"4. Estimate via RsienaTwoStep > 4.3. Estimate model","what":"4.3.2. check convergence visually","title":"RSienaWorkFlow","text":"let’s look parameters converged. Let us zoom little transTrip last 250 iterations .  Well, make ? lines keep oscillating around specific value, try increase b parameter. Conversely, lines converge see oscillation decrease b parameter. case, think /increase b 250 iterations . also try re-estimate model different starting values. like inspect results Robbins Monro algorithm way, go phase3 phase3 takes quite time.","code":"df <- data.frame(ts_ans1c) vars <- colnames(df) df$ite <- 1:nrow(ts_ans1c) #convert data from wide to long format df <- df %>% pivot_longer(cols= all_of(vars),                           names_to='statistic',                           values_to='estimate')  ggplot(df, aes(x=ite, y=estimate)) +    geom_line(aes(color=statistic)) df <- data.frame(ts_ans1c) vars <- colnames(df) df$ite <- 1:nrow(ts_ans1c) #convert data from wide to long format df <- df %>% pivot_longer(cols= vars[c(4)],                           names_to='statistic',                           values_to='estimate')  ggplot(df, aes(x=ite, y=estimate)) +    geom_line(aes(color=statistic)) df <- data.frame(ts_ans1c) vars <- colnames(df) df$ite <- 1:nrow(ts_ans1c) #convert data from wide to long format df <- df[750:1000,] %>% pivot_longer(cols= vars[c(4)],                           names_to='statistic',                           values_to='estimate')  ggplot(df, aes(x=ite, y=estimate)) +    geom_line(aes(color=statistic))"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"estimate-se-tstats-and-tconv-max","dir":"Articles","previous_headings":"4. Estimate via RsienaTwoStep > 4.3. Estimate model","what":"4.3.3. Estimate SE, tstats and tconv.max","title":"RSienaWorkFlow","text":"","code":"ESTIM <- ts_ans1c[nrow(ts_ans1c),] #we will take the last for now.  ESTIM <- ans3$theta ans1c_phase3 <- ts_phase3(startvalues = ESTIM, net1 = s501, net2= s502, statistics = STATS, ccovar = DF, itef3 = 1000, parallel = TRUE, returnDeps = TRUE, verbose = TRUE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"final-results","dir":"Articles","previous_headings":"4. Estimate via RsienaTwoStep","what":"4.4 final results","title":"RSienaWorkFlow","text":"Let us look final results. conclusion RSienatwostep can properly estimate (simple) network evolution model using common ministep assumption. Good job!","code":"SE <- sqrt(diag(ans1c_phase3$covtheta)) tstat <- ans1c_phase3$tstat tconv.max <- ans1c_phase3$tconv.max df <- data.frame(estim = ESTIM, SE = SE, \"tratio\" = tstat)  knitr::kable(df, digits = 3, \"html\", escape=FALSE, col.names = c(\"Estimate\", \"Standard <br> Error\", \"Convergence <br> t-ratio\")) %>%         kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %>%         kableExtra::scroll_box(width = \"100%\", height = \"500px\") %>%         kableExtra::footnote(general = paste(\"tconv.max:\", round(tconv.max, 3), sep=\" \"))"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"compare-the-estimates-of-the-different-twostep-models","dir":"Articles","previous_headings":"","what":"5. Compare the estimates of the different twostep models","title":"RSienaWorkFlow","text":"different models mean models statistics using different assumptions respect theory (inter)action. also think nice workflow want test robustness ministep model: estimate ministep model (SE, fit statistics) simultaneity strict coordination weak coordination simstep visually check model convergence see twostep models lead (substantially) different estimates , estimate phase3 models (fit statistics) compare final models Compare GOF","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"estimate-ministep-model","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models","what":"5.1. estimate ministep model","title":"RSienaWorkFlow","text":"already course. hey,..","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"via-rsiena","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models > 5.1. estimate ministep model","what":"5.1.1. via RSiena","title":"RSienaWorkFlow","text":"","code":"#Step 1. prepare dataset mynet <- sienaDependent(array(c(s501, s502), dim=c(50, 50, 2))) alcohol <- s50a smoke <- s50s smoke <- coCovar(smoke[, 1]) alcohol <- coCovar(alcohol[, 1]) mydata <- sienaDataCreate(mynet, smoke, alcohol)  # Step 2. algorithm myalgorithm <- sienaAlgorithmCreate(cond = FALSE, findiff = TRUE, projname=NULL)   # Step 3. Define the model myeff <- getEffects(mydata) myeff <- includeEffects(myeff, cycle3, transTrip) myeff <- includeEffects(myeff, egoX, altX, egoXaltX, interaction1 = \"alcohol\") myeff <- includeEffects(myeff, simX, interaction1 = \"smoke\")  # Step 4. Estimate the model.  ans3 <- siena07(myalgorithm, data=mydata, effects=myeff, batch=TRUE, returnDeps = TRUE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"via-rsienatwostep","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models > 5.1. estimate ministep model","what":"5.1.2. via RsienaTwoStep","title":"RSienaWorkFlow","text":"","code":"#Step 1. prepare dataset DF <- data.frame(alcohol = s50a[, 1], smoke = s50s[, 1]) #Step 2. define the model  STATS <- list(ts_degree,                ts_recip,                ts_transTrip,                ts_cycle3,                list(ts_simX, \"smoke\"),                list(ts_altX, \"alcohol\"),                list(ts_egoX, \"alcohol\"),                list(ts_egoXaltX, \"alcohol\")) #Step 3. estimate Ministep model (default) ts_ansMS <- ts_estim(net1 = s501, net2= s502, statistics = STATS, ccovar = DF, parallel = TRUE)"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"phase2","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models > 5.2. Estimate twostep models","what":"5.2.1. phase2","title":"RSienaWorkFlow","text":"use ans ’RSiena07()` input. estimate phase2. goal much come perfect estimate check estimates within CI original estimates RSiena. case, may need estimate model using different assumptions.","code":"### simultaneity ts_ansS <- ts_estim(ans = ans3, nite = 250, conv = 0.01, parallel = TRUE, phase3 = FALSE, p2step = c(0,1,0)) fsave(ts_ansS, \"ts_ansS.rda\")  ### weak coordination ts_ansWC <- ts_estim(ans = ans3, nite = 250, conv = 0.01, parallel = TRUE, phase3 = FALSE, p2step = c(0,1,0), dist1 = 2, dist2 = 2, modet1 = \"degree\", modet2 = \"degree\") fsave(ts_ansWC, \"ts_ansWC.rda\")  ### strict coordination ts_ansSC <- ts_estim(ans = ans3, nite = 250, conv = 0.01, parallel = TRUE, phase3 = FALSE, p2step = c(0,1,0), dist1 = 2, modet1 = \"degree\" ) fsave(ts_ansSC, \"ts_ansSC.rda\")  ### simstep ts_ansST <- ts_estim(ans = ans3, nite = 250, conv = 0.01, parallel = TRUE, phase3 = FALSE, p2step = c(0,0,1)) fsave(ts_ansST, \"ts_ansST.rda\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"check-convergence-visually-1","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models","what":"5.3. check convergence visually","title":"RSienaWorkFlow","text":"see weak coordination, strict coordination simstep stopped maximum 250 iterations. Thus, models takes (bit) longer reach convergence. also observe wobbly lines. , bad?","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"simultaneity","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models > 5.3. check convergence visually","what":"5.3.1. simultaneity","title":"RSienaWorkFlow","text":"### 5.3.2. weak coordination ### 5.3.3. strict coordination ### 5.3.4. simstep","code":"ts_ans <- ts_ansS df <- data.frame(ts_ans) vars <- colnames(df) df$ite <- 1:nrow(ts_ans) #convert data from wide to long format df <- df %>% pivot_longer(cols= vars,                           names_to='statistic',                           values_to='estimate')  ggplot(df, aes(x=ite, y=estimate)) +    geom_line(aes(color=statistic)) ts_ans <- ts_ansWC df <- data.frame(ts_ans) vars <- colnames(df) df$ite <- 1:nrow(ts_ans) #convert data from wide to long format df <- df %>% pivot_longer(cols= vars,                           names_to='statistic',                           values_to='estimate')  ggplot(df, aes(x=ite, y=estimate)) +    geom_line(aes(color=statistic)) ts_ans <- ts_ansSC df <- data.frame(ts_ans) vars <- colnames(df) df$ite <- 1:nrow(ts_ans) #convert data from wide to long format df <- df %>% pivot_longer(cols= vars,                           names_to='statistic',                           values_to='estimate')  ggplot(df, aes(x=ite, y=estimate)) +    geom_line(aes(color=statistic)) ts_ans <- ts_ansST df <- data.frame(ts_ans) vars <- colnames(df) df$ite <- 1:nrow(ts_ans) #convert data from wide to long format df <- df %>% pivot_longer(cols= vars,                           names_to='statistic',                           values_to='estimate')  ggplot(df, aes(x=ite, y=estimate)) +    geom_line(aes(color=statistic))"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"compare-estimates","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models","what":"5.4. Compare estimates","title":"RSienaWorkFlow","text":"figure already tells us twostep model less leads similar estimates. notably exceptions, however. Weak coordination: much smaller degree estimate, much larger reciprocity estimate larger transTrip estimate. strange since weak coordination two alters connected either beginning twostep twostep.","code":"#CI of RSiena down <- ans3$theta - 1.96 * sqrt(diag(ans3$covtheta)) up <- ans3$theta + 1.96 * sqrt(diag(ans3$covtheta))  #our statistics stats <-  factor(vars, levels = vars) #final estimates  b_s <- ts_ansS[nrow(ts_ansS),] b_sc <- ts_ansSC[nrow(ts_ansSC),] b_wc <- ts_ansWC[nrow(ts_ansWC),] b_st <- ts_ansST[nrow(ts_ansST),]  #put everything in a dataframe my.dt <- data.frame(statistics = stats, estimate=ans3$theta, down=down, up=up, b_s=b_s, b_sc=b_sc, b_wc=b_wc, b_st=b_st)  #use different layers to plot the separate estimates. and include a manual legend.  ggplot(my.dt, aes(x=statistics, y=estimate)) +                geom_point(size = 3, aes(color=\"ministep\")) +       geom_errorbar(aes(ymin = down, ymax = up, color=\"ministep\")) +        geom_point(size = 3, alpha = 0.5, aes(x=stats, y=b_s, color=\"simultaneity\" )) +        geom_point(size = 3, alpha = 0.5, aes(x=stats, y=b_sc , color=\"strict coordination\")) +    geom_point(size = 3, alpha = 0.5, aes(x=stats, y=b_wc, color=\"weak coordination\")) +    geom_point(size = 3, alpha = 0.5, aes(x=stats, y=b_st, color=\"simstep\")) +    scale_color_manual(name= \"Estimation type\",                       breaks = c(\"ministep\", \"simultaneity\", \"strict coordination\", \"weak coordination\", \"simstep\"),                      values = c(\"ministep\"= \"black\", \"simultaneity\" = \"red\", \"strict coordination\" = \"blue\", \"weak coordination\" = \"green\", \"simstep\" = \"orange\")) +    scale_x_discrete(guide = guide_axis(n.dodge = 2)) +   scale_y_continuous(n.breaks=10)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"phase3-for-all-twostep-models","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models","what":"5.5. phase3 for all twostep models","title":"RSienaWorkFlow","text":"Please note, can take long time (week), even relatively low itef3 default value 100 ts_phase3().","code":"b_s <- ts_ansS[nrow(ts_ansS),] b_sc <- ts_ansSC[nrow(ts_ansSC),] b_wc <- ts_ansWC[nrow(ts_ansWC),] b_st <- ts_ansST[nrow(ts_ansST),]  ### simultaneity ts_ansSp3 <- ts_phase3(mydata = mydata, myeff = myeff, startvalues =  b_s, parallel = TRUE, returnDeps = TRUE, p2step = c(0,1,0)) fsave(ts_ansSp3, \"ts_ansSp3.rda\")  ### weak coordination ts_ansWCp3 <- ts_phase3(mydata = mydata, myeff = myeff, startvalues =  b_wc, parallel = TRUE, returnDeps = TRUE, p2step = c(0,1,0), dist1 = 2, dist2 = 2, modet1 = \"degree\", modet2 = \"degree\") fsave(ts_ansWCp3, \"ts_ansWCp3.rda\")  ### strict coordination ts_ansSCp3 <- ts_phase3(mydata = mydata, myeff = myeff, startvalues =  b_sc, parallel = TRUE, returnDeps = TRUE, p2step = c(0,1,0), dist1 = 2, modet1 = \"degree\") fsave(ts_ansSCp3, \"ts_ansSCp3.rda\")  ### simstep ts_ansSTp3 <- ts_phase3(mydata = mydata, myeff = myeff, startvalues =  b_st, parallel = TRUE, returnDeps = TRUE, p2step = c(0,0,1)) fsave(ts_ansSTp3, \"ts_ansSTp3.rda\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"final-results-1","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models > 5.5. phase3 for all twostep models","what":"5.5.1 final results!","title":"RSienaWorkFlow","text":"conclude five different theories interaction lead similar conclusions respect significance included statistics.","code":"estim_MS <- ans3$theta SE_MS <- sqrt(diag(ans3$covtheta)) tstat_MS <- ans3$tconv tconv.max_MS <- ans3$tconv.max  estim_S <- ts_ansSp3$estim SE_S <- sqrt(diag(ts_ansSp3$covtheta)) tstat_S <- ts_ansSp3$tstat tconv.max_S <- ts_ansSp3$tconv.max  estim_WC <- ts_ansWCp3$estim SE_WC <- sqrt(diag(ts_ansWCp3$covtheta)) tstat_WC <- ts_ansWCp3$tstat tconv.max_WC <- ts_ansWCp3$tconv.max  estim_SC <- ts_ansSCp3$estim SE_SC <- sqrt(diag(ts_ansSCp3$covtheta)) tstat_SC <- ts_ansSCp3$tstat tconv.max_SC <- ts_ansSCp3$tconv.max  estim_ST <- ts_ansSTp3$estim SE_ST <- sqrt(diag(ts_ansSTp3$covtheta)) tstat_ST <- ts_ansSTp3$tstat tconv.max_ST <- ts_ansSTp3$tconv.max   df <- data.frame(estim_MS = estim_MS, SE_MS = SE_MS, tstat_MS = tstat_MS,                 estim_S = estim_S, SE_S = SE_S, tstat_S = tstat_S,                  estim_WC = estim_WC, SE_WC = SE_WC, tstat_WC = tstat_WC,                  estim_SC = estim_SC, SE_SC = SE_SC, tstat_SC = tstat_SC,                  estim_ST = estim_ST, SE_ST = SE_ST, tstat_ST = tstat_ST)  results <- knitr::kable(df, digits = 3, \"html\",              col.names = rep(c(\"Estim\", \"SE\", \"tstat\"), 5)) %>%          kableExtra::add_header_above(c(\" \", \"ministep$^a$\" = 3, \"simultaneity$^b$\" = 3, \"weak coordination$^c$\" = 3, \"strict coordination$^d$\" = 3, \"simstep$^e$\" = 3)) %>%         kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %>%   kableExtra::add_footnote(c(paste(\"tconv.max:\", round(tconv.max_MS, 3), sep=\" \"),                              paste(\"tconv.max:\", round(tconv.max_S, 3), sep=\" \"),                              paste(\"tconv.max:\", round(tconv.max_WC, 3), sep=\" \"),                              paste(\"tconv.max:\", round(tconv.max_SC, 3), sep=\" \"),                              paste(\"tconv.max:\", round(tconv.max_ST, 3), sep=\" \")                              ), notation=\"alphabet\") %>%         kableExtra::scroll_box(width = \"100%\", height = \"500px\")           results #kableExtra::save_kable(results, \"./data/processed/results.html\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"gof","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models","what":"5.6. GOF","title":"RSienaWorkFlow","text":"Overal conclusion: ministep simultaneity less identical differences different theories interaction small simstep seems best overal performance","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"gof---degree-distribution","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models > 5.6. GOF","what":"5.6.1 GOF - degree distribution","title":"RSienaWorkFlow","text":"Interesting!! tentative conclusions: difference simultaneity ministep weak coordination best degree 1 degree 4. higher degrees (5 6) strict coordination best. simstep either just good ministep outperforms ministep","code":"df_tsMS <- ts_degreecount(sims=ans1c_phase3$simnets, simtype=\"ministep\")  df_tsS <- ts_degreecount(sims=ts_ansSp3$simnets, simtype=\"simultaneity\")  df_tsWC <- ts_degreecount(sims=ts_ansWCp3$simnets, simtype=\"weak coordination\")  df_tsSC <- ts_degreecount(sims=ts_ansSCp3$simnets, simtype=\"strict coordination\")  df_tsST <- ts_degreecount(sims=ts_ansSTp3$simnets, simtype=\"simstep\")   #targets df_target <- ts_degreecount(list(s502), simtype=\"target\") df_target <- df_target[,c(\"x\", \"y\")] names(df_target)[2] <- \"target\" df <- rbind(df_tsMS, df_tsS, df_tsWC, df_tsSC, df_tsST) df <- left_join(df, df_target) #focus in degree until 6 df_sel <- df[df$x==\"deg1\" | df$x==\"deg2\" | df$x==\"deg3\"| df$x==\"deg4\"| df$x==\"deg5\"| df$x==\"deg6\",]  p <- ggplot(df_sel, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\"))) ) +    geom_violin(position=position_dodge(.8)) +    stat_summary( aes(x=x, y=target, fill=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\"))), fun = mean,                geom = \"point\",                color=\"black\", shape=10, position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +    labs(x = \"degree\", y = \"degree count\", fill=\"simulation type\")      p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"gof---dyad-census","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models > 5.6. GOF","what":"5.6.2. GOF - dyad census","title":"RSienaWorkFlow","text":"Conclusion: strict coordination seems winner. simstep outperforming ministep.","code":"df_tsMS <- ts_dyads(sims=ans1c_phase3$simnets, simtype=\"ministep\")  df_tsS <- ts_dyads(sims=ts_ansSp3$simnets, simtype=\"simultaneity\")  df_tsWC <- ts_dyads(sims=ts_ansWCp3$simnets, simtype=\"weak coordination\")  df_tsSC <- ts_dyads(sims=ts_ansSCp3$simnets, simtype=\"strict coordination\")  df_tsST <- ts_dyads(sims=ts_ansSTp3$simnets, simtype=\"simstep\")   #targets df_target <- ts_dyads(list(s502), simtype=\"target\") df_target <- df_target[,c(\"x\", \"y\")] names(df_target)[2] <- \"target\" df <- rbind(df_tsMS, df_tsS, df_tsWC, df_tsSC, df_tsST) df <- left_join(df, df_target)  df_sel <- df[df$x==\"asym\" | df$x==\"mut\" ,]  p <- ggplot(df_sel, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\"))) ) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +    stat_summary( aes(x=x, y=target, fill=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\"))), fun = mean,                geom = \"point\",                color=\"black\", shape=10, position=position_dodge(.8)) +   labs(x = \"dyad type\", y = \"dyad count\", fill=\"simulation type\")  p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"gof---triad-census","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models > 5.6. GOF","what":"5.6.3. GOF - triad census","title":"RSienaWorkFlow","text":"Conclusion: strict coordination seems winner. simstep outperforming ministep triad configurations.","code":"df_tsMS <- ts_triads(sims=ans1c_phase3$simnets, simtype=\"ministep\")  df_tsS <- ts_triads(sims=ts_ansSp3$simnets, simtype=\"simultaneity\")  df_tsWC <- ts_triads(sims=ts_ansWCp3$simnets, simtype=\"weak coordination\")  df_tsSC <- ts_triads(sims=ts_ansSCp3$simnets, simtype=\"strict coordination\")  df_tsST <- ts_triads(sims=ts_ansSTp3$simnets, simtype=\"simstep\")   #targets df_target <- ts_triads(list(s502), simtype=\"target\") df_target <- df_target[,c(\"x\", \"y\")] names(df_target)[2] <- \"target\" df <- rbind(df_tsMS, df_tsS, df_tsWC, df_tsSC, df_tsST) df <- left_join(df, df_target) #> Joining with `by = join_by(x)`  df_sel <- df[df$x==\"021D\" | df$x==\"021U\" | df$x==\"021C\",]  p <- ggplot(df_sel, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\"))) ) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +    stat_summary( aes(x=x, y=target, fill=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\"))), fun = mean,                geom = \"point\",                color=\"black\", shape=10, position=position_dodge(.8)) +   labs(x = \"triad type\", y = \"triad count\", fill=\"simulation type\")  p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"gof---smoke-segregation","dir":"Articles","previous_headings":"5. Compare the estimates of the different twostep models > 5.6. GOF","what":"5.6.4. GOF - smoke segregation","title":"RSienaWorkFlow","text":"Conclusion: weak strict coordination worst","code":"df_tsMS <- ts_nacf(sims=ans1c_phase3$simnets, simtype=\"ministep\", cov=DF$smoke)  df_tsS <- ts_nacf(sims=ts_ansSp3$simnets, simtype=\"simultaneity\", cov=DF$smoke)  df_tsWC <- ts_nacf(sims=ts_ansWCp3$simnets, simtype=\"weak coordination\", cov=DF$smoke)  df_tsSC <- ts_nacf(sims=ts_ansSCp3$simnets, simtype=\"strict coordination\", cov=DF$smoke)  df_tsST <- ts_nacf(sims=ts_ansSTp3$simnets, simtype=\"simstep\", cov=DF$smoke)   #targets df_target <- ts_nacf(list(s502), simtype=\"target\", cov=DF$smoke) names(df_target)[1] <- \"target\" df <- rbind(df_tsMS, df_tsS, df_tsWC, df_tsSC, df_tsST) names(df)[1] <- \"MoranI\"  df$target <- df_target$target  p <- ggplot(df, aes(x=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\")), y=MoranI, fill=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\"))) ) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +    stat_summary( aes(x=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\")), y=target, fill=factor(type, levels=c(\"ministep\", \"simultaneity\", \"weak coordination\", \"strict coordination\", \"simstep\"))), fun = mean,                geom = \"point\",                color=\"black\", shape=10, position=position_dodge(.8)) +   labs(x = \"simulation type\", y = \"smoke segregation (MoranI)\", fill=\"simulation type\") +   scale_x_discrete(guide = guide_axis(n.dodge = 2))  p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/articles/RsienaWorkflow.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"6. Conclusion","title":"RSienaWorkFlow","text":"RsienaTwoStep offers workflow assessing extent ministep assumption crucial. crucial mean parameter estimates model fit depend chosen ‘micro theory interaction’. example, assumption crucial. theories interaction lead similar conclusions respect significance included statistics GOF ministep twostep models similar. Perhaps simstep models best GOF.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jochem Tolsma. Author, maintainer.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tolsma J (2024). RsienaTwoStep: Simulate Network Evolution Allowing Two Tie Changes Simultaneously. R package version 1.0,  https://jochemtolsma.github.io/RsienaTwoStep/, https://github.com/JochemTolsma/RsienaTwoStep.","code":"@Manual{,   title = {RsienaTwoStep: Simulate Network Evolution Allowing Two Tie Changes Simultaneously},   author = {Jochem Tolsma},   year = {2024},   note = {R package version 1.0,  https://jochemtolsma.github.io/RsienaTwoStep/},   url = {https://github.com/JochemTolsma/RsienaTwoStep}, }"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_1-rsienatwostep","dir":"","previous_headings":"","what":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"<img src=“man/figures/logo.png” align=“right”, alt = ““, width=”120” /> goal RsienaTwoStep provide method asses extent results obtained RSiena::siena07() depend validity ministep assumption. crucial assumption SAOM implemented RSiena ministep: one actor time allowed make one tie-change. package aims provide method asses extent results obtained RSiena hinge crucial ministep assumption. simulating evolution networks allowing twosteps - two actors allowed make one tie-change simultaneously - allowing simsteps - one actor allowed make two tie-changes simultaneously.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_11-twostep","dir":"","previous_headings":"","what":"1.1. Twostep","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"Depending precise implementation twostep procedure, allowing twosteps can interpreted simply : - allowing simultaneity: two actors picked random simultaneously make ministep; - allowing weak coordination: two actors picked random simultaneously make ministep specific possible future networks regarded result coordination included choice set two actors; - allowing strict coordination: actors sampled make twostep connected time1.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_12-simstep","dir":"","previous_headings":"","what":"1.2. Simstep","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"Allowing simsteps can interpreted : - allowing simultaneity: one actor simply can make two ties tie; - allowing strategic action: see ‘simultaneously’ created ties sequential ties, actor may create one tie (necessarily positively evaluated ) ensure highly positively evaluated second tie can created next.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_13-mixing-steps","dir":"","previous_headings":"","what":"1.3. Mixing steps","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"package can mix ratio ministeps, twosteps simsteps.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_2-installation","dir":"","previous_headings":"","what":"2. Installation","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"can install development version RsienaTwoStep GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"JochemTolsma/RsienaTwoStep\", build_vignettes=TRUE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_21-website-and-vignettes","dir":"","previous_headings":"","what":"2.1. Website and Vignettes","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"Make sure check package website browse vignettes:","code":"browseVignettes(\"RsienaTwoStep\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_3-examples","dir":"","previous_headings":"","what":"3. Examples","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"ABM-ministep, ABM-twostep ABM-ministep simulations toy data","code":"library(RsienaTwoStep) #> Loading required package: foreach"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_31-our-network","dir":"","previous_headings":"","what":"3.1. Our network","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"","code":"net1g <- igraph::graph_from_adjacency_matrix(ts_net1, mode=\"directed\") plot(net1g)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_32-setting-up-cluster","dir":"","previous_headings":"","what":"3.2. setting up cluster","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"course necessary make simulations lot faster.","code":"library(doParallel) #> Loading required package: iterators #> Loading required package: parallel n.cores <- parallel::detectCores() - 1  #save one core for other work # create the cluster my.cluster <- parallel::makeCluster(n.cores, type = \"PSOCK\") # register it to be used by %dopar% doParallel::registerDoParallel(cl = my.cluster) #stopCluster(my.cluster)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_33-degree-and-reciprocity","dir":"","previous_headings":"","what":"3.3. Degree and reciprocity","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"Let us assume people really don’t like non-reciprocal tie like reciprocal ties lot. (want help help !) Thus start network without many (reciprocal) ties difficult get reciprocal ties normal ministep model. However, simultaneity possible.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_331-simulate-networks","dir":"","previous_headings":"3.3. Degree and reciprocity","what":"3.3.1. Simulate networks","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"can now simulate network given different assumptions respect tie-changes. simulate according traditional ministep assumption, twostep assumption simstep assumption.","code":"#the first value of the startvalues arg refers to the rate parameter sims1 <- ts_sims(net1=ts_net1, startvalues=c(10,-1,2), statistics=list(ts_degree, ts_recip), p2step=c(1,0,0), parallel=TRUE) #ministep only (one actor can make one tie change)  sims2 <- ts_sims(net1=ts_net1, startvalues=c(10,-1,2), statistics=list(ts_degree, ts_recip), p2step=c(0,1,0), parallel=TRUE) #twostep-simultaneity (two random actors can make one tie change simultaneously)  sims3 <- ts_sims(net1=ts_net1, startvalues=c(10,-1,2), statistics=list(ts_degree, ts_recip), p2step=c(0,0,1), parallel=TRUE) #simstep (one actor can make two tie changes simultaneously)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_332-network-census","dir":"","previous_headings":"3.3. Degree and reciprocity","what":"3.3.2. Network census","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"package RsienaTwoStep build functions dyad census triad census. Let us compare dyad census simulated networks.","code":"df_s1 <- ts_dyads(sims=sims1, simtype=\"ministep\")  df_s2 <- ts_dyads(sims=sims2, simtype=\"twostep-simultaneity\")  df_s3 <- ts_dyads(sims=sims3, simtype=\"simstep\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_333-plot-dyadcensus","dir":"","previous_headings":"3.3. Degree and reciprocity","what":"3.3.3. Plot dyadcensus","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"","code":"library(ggplot2)  # combine datasets df <- rbind(df_s1, df_s2, df_s3)  p <- ggplot(df, aes(x=x, y=y, fill=factor(type, levels=c(\"ministep\", \"twostep-simultaneity\", \"simstep\")))) +    geom_violin(position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"errorbar\",                fun.max = function(x) mean(x) + sd(x),                fun.min = function(x) mean(x) - sd(x),                width=.1,                color=\"red\", position=position_dodge(.8)) +    stat_summary(fun = mean,                geom = \"point\",                color=\"red\", position=position_dodge(.8)) +   labs(x = \"dyad type\", y = \"dyad count\", fill=\"simulation type\")    p"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/index.html","id":"id_4-conclusion","dir":"","previous_headings":"","what":"4. Conclusion","title":"Simulate Network Evolution Allowing Two Tie Changes Simultaneously","text":"two actors allowed change ties simultaneously, lead reciprocal ties actors make tie-change one . final network thus also dense assume twostep process compared ministep process. network given degree reciprocity relevant network statistics, ministep simstep model lead similar results.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/df_ccovar1.html","id":null,"dir":"Reference","previous_headings":"","what":"df_ccovar1 — df_ccovar1","title":"df_ccovar1 — df_ccovar1","text":"dataset two fictive covariates, one dichotemous, one integer values. used net1","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/df_ccovar1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"df_ccovar1 — df_ccovar1","text":"","code":"df_ccovar1"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/df_ccovar1.html","id":"df-ccovar-","dir":"Reference","previous_headings":"","what":"df_ccovar1","title":"df_ccovar1 — df_ccovar1","text":"Dataset time constant covariates, used 'net1'","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/DyadCensus.sna.html","id":null,"dir":"Reference","previous_headings":"","what":"helper functions — DyadCensus.sna","title":"helper functions — DyadCensus.sna","text":"functions calculate respective network statistic ego. multiplied importance statistic ('parameters') constitutes network evaluation ego. See: ts_eval().","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/DyadCensus.sna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper functions — DyadCensus.sna","text":"","code":"DyadCensus.sna(i, data, sims, period, groupName, varName, levls = 1:3)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/DyadCensus.sna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper functions — DyadCensus.sna","text":"cov numeric, covariate scores","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_alternatives_ministep.html","id":null,"dir":"Reference","previous_headings":"","what":"Possible networks after ministep of ego — f_alternatives_ministep","title":"Possible networks after ministep of ego — f_alternatives_ministep","text":"f_alternatives_ministep() constructs possible future networks time2 ministep ego given network net time1. f_alternatives_twostep() constructs possible future networks time2 twostep two internally sampled egos (via f_select()) given network net time1.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_alternatives_ministep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Possible networks after ministep of ego — f_alternatives_ministep","text":"","code":"f_alternatives_ministep(net, ego)  f_alternatives_twostep(   net,   dist1 = NULL,   dist2 = NULL,   modet1 = \"degree\",   modet2 = \"degree\" )"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_alternatives_ministep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Possible networks after ministep of ego — f_alternatives_ministep","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. ego numeric, value indicating ego (row number net) dist1 numeric, minimal path length ego1 ego2 time1 order allowed start coordination. NULL dyads allowed start coordination (.e. simultaneity). dist2 numeric, minimal path length ego1 ego2 time2 order twostep counted coordination. See DETAILS. modet1 string indicating type ties evaluated time1. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego1. See: DETAILS. modet2 string, indicating type ties evaluated time2. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego1. See: DETAILS.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_alternatives_ministep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Possible networks after ministep of ego — f_alternatives_ministep","text":"list, list alternative adjacency matrices possible ministeps ego (f_alternatives_ministep) possible twosteps two egos (f_alternatives_twostep)","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_alternatives_ministep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Possible networks after ministep of ego — f_alternatives_ministep","text":"f_alternatives_ministep() mimics ministep assumption implemented SAOM RSiena::siena07() (Ripley et al. 2022) . f_alternatives_twostep() allows two actors simultaneously make ministep, twostep. function implements three types coordination: simultaneity: two actors picked random simultaneously make ministep; weak coordination: two actors picked random simultaneously make ministep specific possible future networks regarded result coordination (determined dist1, dist2 modet1 modet2) included choice set two actors; strict coordination: actors sampled make twostep connected time1 (determined dist1 modet1).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_alternatives_ministep.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Possible networks after ministep of ego — f_alternatives_ministep","text":"Ripley RM, Snijders TA, Boda Z, Vörös , Preciado P (2022). Manual SIENA version 4.0 (version August 11, 2022). http://www.stats.ox.ac.uk/~snijders/siena/RSiena_manual.pdf.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_alternatives_ministep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Possible networks after ministep of ego — f_alternatives_ministep","text":"","code":"f_alternatives_ministep(net=net1, ego=3) #> [[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[2]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    1    0    0    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[3]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[4]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    1    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[5]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    1    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[6]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[7]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    1    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[8]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    1    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[9]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    0    1     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[10]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    0    0     1 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Statistics — f_degree","title":"Network Statistics — f_degree","text":"functions calculate respective network statistic ego. multiplied importance statistic ('parameters') constitutues network evaluation ego. See: f_eval().","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network Statistics — f_degree","text":"","code":"f_degree(net, ego)  f_recip(net, ego)  f_outAct(net, ego)  f_inAct(net, ego)  f_outPop(net, ego)  f_inPop(net, ego)  f_transTrip(net, ego)  f_transMedTrip(net, ego)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network Statistics — f_degree","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. ego numeric, ego want calculate network statistic.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network Statistics — f_degree","text":"numeric value","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_degree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network Statistics — f_degree","text":"examples use statistics see: vignette(\"Introduction_RsienaTwoStep\", package=\"RsienaTwoStep\"):. mathematical definition network statistics see chapter 12 RSiena manual (Ripley et al. 2022) .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_degree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Network Statistics — f_degree","text":"Ripley RM, Snijders TA, Boda Z, Vörös , Preciado P (2022). Manual SIENA version 4.0 (version August 11, 2022). http://www.stats.ox.ac.uk/~snijders/siena/RSiena_manual.pdf.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network Statistics — f_degree","text":"","code":"f_degree(net=net1, ego=3) #> [1] 2"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Network census — f_dyads","title":"Network census — f_dyads","text":"functions calculate characteristics simulated networks. now, dyad census triad census implemented.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network census — f_dyads","text":"","code":"f_dyads(sims, simtype = \"notypespecified\", forplot = TRUE)  f_triads(sims, simtype = \"notypespecified\", forplot = TRUE)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network census — f_dyads","text":"sims list, result f_sims() adjacency matrix representing relations actors. Valid values 0 1. simtype string, name simulation type used (e.g. ministep, twostep). forplot logical, set FALSE dataframe returned column network characteristic row represents simulation outcome. set TRUE dataframe manipulated bit, row represents one specific network characteristic simulation outcome, useful plotting.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network census — f_dyads","text":"data.frame","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_dyads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network census — f_dyads","text":"examples use statistics see: vignette(\"Introduction_RsienaTwoStep\").","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network census — f_dyads","text":"","code":"if (FALSE) { results_ministep <- f_sims(net=net1, rate=5, statistics=list(f_degree, f_recip), parameters=c(-3,1)) results_twostep <- f_sims(net=net1, rate=5, statistics=list(f_degree, f_recip), parameters=c(-3,1), p2step=1)  df_ms <- f_dyads(sims=results_ministep, simtype=\"ministep\") df_ts <- f_dyads(sims=results_twostep, simtype=\"twostep\")  df <- rbind(df_ms, df_ts) p <- ggplot(df, aes(x=x, y=y, fill=type)) +  geom_violin(position=position_dodge(1)) +  stat_summary(fun = mean,               geom = \"errorbar\",               fun.max = function(x) mean(x) + sd(x),               fun.min = function(x) mean(x) - sd(x),               width=.1,               color=\"red\", position=position_dodge(1)) +  stat_summary(fun = mean,               geom = \"point\",               color=\"red\", position=position_dodge(1))  p }"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation function — f_eval","title":"Evaluation function — f_eval","text":"Evaluation function","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation function — f_eval","text":"","code":"f_eval(net, ego, statistics, parameters)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation function — f_eval","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. ego numeric, ego going calculat evaluates network. statistics list names statistic functions length parameters. See e.g. f_degree() list available statistic functions. parameters vector numeric values length statistics.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluation function — f_eval","text":"mathematical definition evaluation function see chapter 12 RSiena manual (Ripley et al. 2022) .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_eval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluation function — f_eval","text":"Ripley RM, Snijders TA, Boda Z, Vörös , Preciado P (2022). Manual SIENA version 4.0 (version August 11, 2022). http://www.stats.ox.ac.uk/~snijders/siena/RSiena_manual.pdf.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluation function — f_eval","text":"","code":"f_eval(net=net1, ego=6, statistics=list(f_degree, f_recip), parameters=c(-2,1)) #> [1] -4 f_eval(net=net1, ego=10, statistics=list(f_degree, f_recip, f_transTrip, f_transMedTrip), parameters=c(-2,2,7,7)) #> [1] 12"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_geodist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance between alters — f_geodist","title":"Distance between alters — f_geodist","text":"Calculates distance, path length, two actors part network.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_geodist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance between alters — f_geodist","text":"","code":"f_geodist(net, ego1, ego2, degree = \"degree\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_geodist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance between alters — f_geodist","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. ego1 numeric, value indicating ego1 (row number net) ego2 numeric, value indicating ego2 (row number net) degree string, type path considered: \"outdegree\"; \"indegree\"; \"degree\".","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_geodist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance between alters — f_geodist","text":"numeric vector length one, distance two egos. egos connected f_geodist returns Inf.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_geodist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance between alters — f_geodist","text":"function wrapper around function sna::geodist.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_geodist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance between alters — f_geodist","text":"","code":"f_geodist(net=net1, ego1=6, ego2=8, degree=\"outdegree\") #> [1] 2 f_geodist(net=net1, ego1=8, ego2=6, degree=\"outdegree\") #> [1] Inf f_geodist(net=net1, ego1=8, ego2=6, degree=\"degree\") #> [1] 2"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select actor(s) — f_select","title":"Select actor(s) — f_select","text":"Select one two actors perform (simultaneous) ministep.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select actor(s) — f_select","text":"","code":"f_select(net, steps = 1, dist1 = NULL, modet1 = \"degree\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select actor(s) — f_select","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. steps numeric, want sample one two actors dist1 numeric, minimal path length ego1 ego2 time1 order allowed start coordination. NULL just simultaneity. NULL steps set 2. modet1 string indicating type ties evaluated time1. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego2.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select actor(s) — f_select","text":"vector length one two, actors sampled.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select actor(s) — f_select","text":"function selects one actor (steps=1) two actors (steps=2) random part network. possible select two actors start coordination (connected dyads time1), function tell .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select actor(s) — f_select","text":"","code":"f_select(net=net1, steps=1) #> [1] 3 f_select(net=net1, steps=2) #> [1] 2 3 f_select(net=net1, dist1=2, modet1=\"degree\") #> [1] 9 3"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_sims.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of Network evolution — f_sims","title":"Simulation of Network evolution — f_sims","text":"f_sims workhorse function package RsienaTwoStep. simulates network evolution nsims times given existing network net, defined evaluation function (f_eval()) statistics parameters average number possible tie changes per actor defined rate.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_sims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of Network evolution — f_sims","text":"","code":"f_sims(   nsims = 1000,   parallel = FALSE,   net,   rate,   statistics,   parameters,   p2step = 0,   chain = FALSE,   dist1 = NULL,   dist2 = NULL,   modet1 = \"degree\",   modet2 = \"degree\" )"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_sims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of Network evolution — f_sims","text":"nsims numeric, number simulations. parallel TRUE/FALSE net matrix, adjacency matrix representing relations actors. Valid values 0 1. rate numeric, average number possible tie-changes per actor simulation. statistics, list names statistic functions (see e.g. f_degree() list available functions) parameters, vector numeric values length parameters p2step numeric, value range [0,1] setting probability twostep occur relative ministep. chain TRUE/FALSE, set TRUE want save subsequent networks (ministep twostep) simulation. FALSE end network saved. dist1 numeric, minimal path length ego1 ego2 time1 order allowed start coorporation. NULL dyads allowed start cooperation. dist2 numeric, minimal path length ego1 ego2 time2 order twostep counted coorporation. modet1 string, indicating type ties evaluated time1. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego2. modet2 string, indicating type ties evaluated time2. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego2.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_sims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of Network evolution — f_sims","text":"chain=FALSE list (length nsims) adjacency matrices representing final network simulated evolution. chain=TRUE list lists adjacency matrices. inner list represents complete network evolution one simulation. outer list refers simulation run (length nsims).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/f_sims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of Network evolution — f_sims","text":"examples use f_sims see: vignette(\"Introduction_RsienaTwoStep\", package=\"RsienaTwoStep\"): package website. set parallel TRUE make sure set-cluster package doParallel (see Examples).","code":""},{"path":[]},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/net1.html","id":null,"dir":"Reference","previous_headings":"","what":"net1 — net1","title":"net1 — net1","text":"fictive directed network","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/net1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"net1 — net1","text":"","code":"net1"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/net1.html","id":"net-","dir":"Reference","previous_headings":"","what":"net1","title":"net1 — net1","text":"non-symmetric (adjacency) matrix 10 rows 10 columns: 0 indicates tie; 1 indicates directed tie (ego (row) alter (column)).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/net2.html","id":null,"dir":"Reference","previous_headings":"","what":"net2 — net2","title":"net2 — net2","text":"fictive directed network","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/net2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"net2 — net2","text":"","code":"net2"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/net2.html","id":"net-","dir":"Reference","previous_headings":"","what":"net2","title":"net2 — net2","text":"non-symmetric (adjacency) matrix 5 rows 5 columns: 0 indicates tie; 1 indicates directed tie (ego (row) alter (column)).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/s501.html","id":null,"dir":"Reference","previous_headings":"","what":"s501 — s501","title":"s501 — s501","text":"directed network","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/s501.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"s501 — s501","text":"","code":"s501"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/s501.html","id":"s-","dir":"Reference","previous_headings":"","what":"s501","title":"s501 — s501","text":"see ?RSiena::s501","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/s501.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"s501 — s501","text":"RSiena","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/s502.html","id":null,"dir":"Reference","previous_headings":"","what":"s502 — s502","title":"s502 — s502","text":"directed network","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/s502.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"s502 — s502","text":"","code":"s502"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/s502.html","id":"s-","dir":"Reference","previous_headings":"","what":"s502","title":"s502 — s502","text":"see RSiena::s502","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep.html","id":null,"dir":"Reference","previous_headings":"","what":"Possible networks after ministep, simstep or twostep — ts_alternatives_ministep","title":"Possible networks after ministep, simstep or twostep — ts_alternatives_ministep","text":"ts_alternatives_ministep() constructs possible future networks time2 ministep ego given network net time1. ts_alternatives_twostep() constructs possible future networks time2 twostep two internally sampled egos (via ts_select()) given network net time1. ts_alternatives_simstep() constructs possible future networks time2 two simultaneous ministeps ego given network net time1.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Possible networks after ministep, simstep or twostep — ts_alternatives_ministep","text":"","code":"ts_alternatives_ministep(net, ego, dist1 = NULL, modet1 = \"degree\")  ts_alternatives_simstep(net, ego)  ts_alternatives_twostep(   net,   dist1 = NULL,   dist2 = NULL,   modet1 = \"degree\",   modet2 = \"degree\" )  ts_alternative(net, ego, alter)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Possible networks after ministep, simstep or twostep — ts_alternatives_ministep","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. ego numeric, value indicating ego (row number net) dist1 numeric, minimal path length ego1 ego2 time1 order allowed start coordination. NULL dyads allowed start coordination (.e. simultaneity). modet1 string indicating type ties evaluated time1. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego1. See: DETAILS. dist2 numeric, minimal path length ego1 ego2 time2 order twostep counted coordination. See DETAILS. modet2 string, indicating type ties evaluated time2. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego1. See: DETAILS. alter numeric, value indicating alter (column number net)","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Possible networks after ministep, simstep or twostep — ts_alternatives_ministep","text":"list, list alternative adjacency matrices possible ministeps ego (ts_alternatives_ministep) possible twosteps two egos (ts_alternatives_twostep)","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Possible networks after ministep, simstep or twostep — ts_alternatives_ministep","text":"ts_alternatives_ministep() mimics ministep assumption implemented SAOM RSiena::siena07() (Ripley et al. 2022) . ts_alternatives_twostep() allows two actors simultaneously make ministep, twostep. function implements three types coordination: simultaneity: two actors picked random simultaneously make ministep; weak coordination: two actors picked random simultaneously make ministep specific possible future networks regarded result coordination (determined dist1, dist2 modet1 modet2) included choice set two actors; strict coordination: actors sampled make twostep connected time1 (determined dist1 modet1). ts_alternatives_simstep() allows one actor make two subsequent ministeps thus opens door strategic actions. , first ministep may contribute increased satisfaction actor (network first ministep evaluated favorably original network) subsequent ministep may make .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Possible networks after ministep, simstep or twostep — ts_alternatives_ministep","text":"Ripley RM, Snijders TA, Boda Z, Vörös , Preciado P (2022). Manual SIENA version 4.0 (version August 11, 2022). http://www.stats.ox.ac.uk/~snijders/siena/RSiena_manual.pdf.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Possible networks after ministep, simstep or twostep — ts_alternatives_ministep","text":"","code":"ts_alternatives_ministep(net = ts_net1, ego = 3) #> [[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[2]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    1    0    0    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[3]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[4]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    1    0    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[5]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    1    1    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[6]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[7]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    1    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[8]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    1    0     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[9]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    0    1     0 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>  #> [[10]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    1    0    0    0    0    0    0     0 #>  [3,]    1    0    0    0    0    1    0    0    0     1 #>  [4,]    0    0    0    0    0    0    0    0    1     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    1     1 #>  [7,]    1    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    1    0    0    0    1    0     0 #> [10,]    0    0    0    0    0    0    0    1    1     0 #>"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep_beh.html","id":null,"dir":"Reference","previous_headings":"","what":"Possible behavior after ministep, simstep or twostep — ts_alternatives_ministep_beh","title":"Possible behavior after ministep, simstep or twostep — ts_alternatives_ministep_beh","text":"ts_alternatives_ministep_beh() constructs possible future behavior score ministep ego. ts_alternatives_twostep_beh() constructs possible future behavioral scores two ministeps two egos. ts_alternatives_simstep_beh() constructs possible future behavioral scores (complete range behavioral variable) one ego.Ego thus allowed jump one extreme ","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep_beh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Possible behavior after ministep, simstep or twostep — ts_alternatives_ministep_beh","text":"","code":"ts_alternatives_ministep_beh(beh, ego)  ts_alternatives_simstep_beh(beh, ego)  ts_alternatives_twostep_beh(beh, net, dist1 = NULL, modet1 = \"degree\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep_beh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Possible behavior after ministep, simstep or twostep — ts_alternatives_ministep_beh","text":"beh numerical, vector representing behavioral scores actors. ego numeric, value indicating ego (row number net) net matrix, adjacency matrix representing relations actors. Valid values 0 1. dist1 numeric, minimal path length ego1 ego2 time1 order allowed start coordination. NULL dyads allowed start coordination (.e. simultaneity). modet1 string indicating type ties evaluated time1. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego1. See: DETAILS.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep_beh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Possible behavior after ministep, simstep or twostep — ts_alternatives_ministep_beh","text":"list, list alternative vector representing te behavioral scores","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_alternatives_ministep_beh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Possible behavior after ministep, simstep or twostep — ts_alternatives_ministep_beh","text":"","code":"ccovar <- ts_prepdata(df_ccovar1) ts_alternatives_ministep_beh(beh = ccovar[, \"cov2\"], ego = 3) #> [[1]] #>  [1]  0.4  0.4  0.4 -0.6  1.4 -1.6  0.4  3.4  0.4 -5.6 #> attr(,\"mean\") #> [1] 1.6 #> attr(,\"simMean\") #> [1] 0.7234568 #> attr(,\"range\") #> [1] 9 #> attr(,\"range2\") #> [1] -4  5 #> attr(,\"simij\") #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,]        NA 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #>  [2,] 1.0000000        NA 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #>  [3,] 0.8888889 0.8888889        NA 0.7777778 1.0000000 0.6666667 0.8888889 #>  [4,] 0.8888889 0.8888889 0.7777778        NA 0.7777778 0.8888889 0.8888889 #>  [5,] 0.8888889 0.8888889 1.0000000 0.7777778        NA 0.6666667 0.8888889 #>  [6,] 0.7777778 0.7777778 0.6666667 0.8888889 0.6666667        NA 0.7777778 #>  [7,] 1.0000000 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778        NA #>  [8,] 0.6666667 0.6666667 0.7777778 0.5555556 0.7777778 0.4444444 0.6666667 #>  [9,] 1.0000000 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #> [10,] 0.3333333 0.3333333 0.2222222 0.4444444 0.2222222 0.5555556 0.3333333 #>            [,8]      [,9]     [,10] #>  [1,] 0.6666667 1.0000000 0.3333333 #>  [2,] 0.6666667 1.0000000 0.3333333 #>  [3,] 0.7777778 0.8888889 0.2222222 #>  [4,] 0.5555556 0.8888889 0.4444444 #>  [5,] 0.7777778 0.8888889 0.2222222 #>  [6,] 0.4444444 0.7777778 0.5555556 #>  [7,] 0.6666667 1.0000000 0.3333333 #>  [8,]        NA 0.6666667 0.0000000 #>  [9,] 0.6666667        NA 0.3333333 #> [10,] 0.0000000 0.3333333        NA #>  #> [[2]] #>  [1]  0.4  0.4  1.4 -0.6  1.4 -1.6  0.4  3.4  0.4 -5.6 #> attr(,\"mean\") #> [1] 1.6 #> attr(,\"simMean\") #> [1] 0.7234568 #> attr(,\"range\") #> [1] 9 #> attr(,\"range2\") #> [1] -4  5 #> attr(,\"simij\") #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,]        NA 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #>  [2,] 1.0000000        NA 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #>  [3,] 0.8888889 0.8888889        NA 0.7777778 1.0000000 0.6666667 0.8888889 #>  [4,] 0.8888889 0.8888889 0.7777778        NA 0.7777778 0.8888889 0.8888889 #>  [5,] 0.8888889 0.8888889 1.0000000 0.7777778        NA 0.6666667 0.8888889 #>  [6,] 0.7777778 0.7777778 0.6666667 0.8888889 0.6666667        NA 0.7777778 #>  [7,] 1.0000000 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778        NA #>  [8,] 0.6666667 0.6666667 0.7777778 0.5555556 0.7777778 0.4444444 0.6666667 #>  [9,] 1.0000000 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #> [10,] 0.3333333 0.3333333 0.2222222 0.4444444 0.2222222 0.5555556 0.3333333 #>            [,8]      [,9]     [,10] #>  [1,] 0.6666667 1.0000000 0.3333333 #>  [2,] 0.6666667 1.0000000 0.3333333 #>  [3,] 0.7777778 0.8888889 0.2222222 #>  [4,] 0.5555556 0.8888889 0.4444444 #>  [5,] 0.7777778 0.8888889 0.2222222 #>  [6,] 0.4444444 0.7777778 0.5555556 #>  [7,] 0.6666667 1.0000000 0.3333333 #>  [8,]        NA 0.6666667 0.0000000 #>  [9,] 0.6666667        NA 0.3333333 #> [10,] 0.0000000 0.3333333        NA #>  #> [[3]] #>  [1]  0.4  0.4  2.4 -0.6  1.4 -1.6  0.4  3.4  0.4 -5.6 #> attr(,\"mean\") #> [1] 1.6 #> attr(,\"simMean\") #> [1] 0.7234568 #> attr(,\"range\") #> [1] 9 #> attr(,\"range2\") #> [1] -4  5 #> attr(,\"simij\") #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,]        NA 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #>  [2,] 1.0000000        NA 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #>  [3,] 0.8888889 0.8888889        NA 0.7777778 1.0000000 0.6666667 0.8888889 #>  [4,] 0.8888889 0.8888889 0.7777778        NA 0.7777778 0.8888889 0.8888889 #>  [5,] 0.8888889 0.8888889 1.0000000 0.7777778        NA 0.6666667 0.8888889 #>  [6,] 0.7777778 0.7777778 0.6666667 0.8888889 0.6666667        NA 0.7777778 #>  [7,] 1.0000000 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778        NA #>  [8,] 0.6666667 0.6666667 0.7777778 0.5555556 0.7777778 0.4444444 0.6666667 #>  [9,] 1.0000000 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #> [10,] 0.3333333 0.3333333 0.2222222 0.4444444 0.2222222 0.5555556 0.3333333 #>            [,8]      [,9]     [,10] #>  [1,] 0.6666667 1.0000000 0.3333333 #>  [2,] 0.6666667 1.0000000 0.3333333 #>  [3,] 0.7777778 0.8888889 0.2222222 #>  [4,] 0.5555556 0.8888889 0.4444444 #>  [5,] 0.7777778 0.8888889 0.2222222 #>  [6,] 0.4444444 0.7777778 0.5555556 #>  [7,] 0.6666667 1.0000000 0.3333333 #>  [8,]        NA 0.6666667 0.0000000 #>  [9,] 0.6666667        NA 0.3333333 #> [10,] 0.0000000 0.3333333        NA #>"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_centering.html","id":null,"dir":"Reference","previous_headings":"","what":"Data preparation — ts_centering","title":"Data preparation — ts_centering","text":"ts_prepdata performs centering similarity score set attribute prepared TRUE ts_centering centers variables use. ts_simij calculates similarity scores use.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_centering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data preparation — ts_centering","text":"","code":"ts_centering(cov)  ts_prep_dep(cov)  ts_simij(cov, min = NULL, max = NULL)  ts_prepdata(ccovar)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_centering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data preparation — ts_centering","text":"cov numeric, behavioral scores actors min numeric, minimum value behavioral scores actors. NULL empirically observed minimum used. max numeric, maximum value behavioral scores actors. NULL empirically observed maximum used. ccovar data frame named time-constant covariates.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_centering.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data preparation — ts_centering","text":"really need update dataprep part, behavioral dependents ccovars time varying covars.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_centering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data preparation — ts_centering","text":"","code":"ts_centering(cov=df_ccovar1[,\"cov1\"]) #>  [1] -0.3  0.7 -0.3  0.7 -0.3  0.7 -0.3 -0.3 -0.3 -0.3 #> attr(,\"mean\") #> [1] 0.3 ts_simij(cov=df_ccovar1[,\"cov2\"]) #>  [1]  2  2  3  1  3  0  2  5  2 -4 #> attr(,\"simMean\") #> [1] 0.7234568 #> attr(,\"range\") #> [1] 9 #> attr(,\"range2\") #> numeric(0) #> attr(,\"simij\") #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,]        NA 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #>  [2,] 1.0000000        NA 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #>  [3,] 0.8888889 0.8888889        NA 0.7777778 1.0000000 0.6666667 0.8888889 #>  [4,] 0.8888889 0.8888889 0.7777778        NA 0.7777778 0.8888889 0.8888889 #>  [5,] 0.8888889 0.8888889 1.0000000 0.7777778        NA 0.6666667 0.8888889 #>  [6,] 0.7777778 0.7777778 0.6666667 0.8888889 0.6666667        NA 0.7777778 #>  [7,] 1.0000000 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778        NA #>  [8,] 0.6666667 0.6666667 0.7777778 0.5555556 0.7777778 0.4444444 0.6666667 #>  [9,] 1.0000000 1.0000000 0.8888889 0.8888889 0.8888889 0.7777778 1.0000000 #> [10,] 0.3333333 0.3333333 0.2222222 0.4444444 0.2222222 0.5555556 0.3333333 #>            [,8]      [,9]     [,10] #>  [1,] 0.6666667 1.0000000 0.3333333 #>  [2,] 0.6666667 1.0000000 0.3333333 #>  [3,] 0.7777778 0.8888889 0.2222222 #>  [4,] 0.5555556 0.8888889 0.4444444 #>  [5,] 0.7777778 0.8888889 0.2222222 #>  [6,] 0.4444444 0.7777778 0.5555556 #>  [7,] 0.6666667 1.0000000 0.3333333 #>  [8,]        NA 0.6666667 0.0000000 #>  [9,] 0.6666667        NA 0.3333333 #> [10,] 0.0000000 0.3333333        NA ts_simij(cov=df_ccovar1[,\"cov2\"], min=-5, max=5) #>  [1]  2  2  3  1  3  0  2  5  2 -4 #> attr(,\"simMean\") #> [1] 0.7511111 #> attr(,\"range\") #> [1] 10 #> attr(,\"range2\") #> numeric(0) #> attr(,\"simij\") #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA  1.0  0.9  0.9  0.9  0.8  1.0  0.7  1.0   0.4 #>  [2,]  1.0   NA  0.9  0.9  0.9  0.8  1.0  0.7  1.0   0.4 #>  [3,]  0.9  0.9   NA  0.8  1.0  0.7  0.9  0.8  0.9   0.3 #>  [4,]  0.9  0.9  0.8   NA  0.8  0.9  0.9  0.6  0.9   0.5 #>  [5,]  0.9  0.9  1.0  0.8   NA  0.7  0.9  0.8  0.9   0.3 #>  [6,]  0.8  0.8  0.7  0.9  0.7   NA  0.8  0.5  0.8   0.6 #>  [7,]  1.0  1.0  0.9  0.9  0.9  0.8   NA  0.7  1.0   0.4 #>  [8,]  0.7  0.7  0.8  0.6  0.8  0.5  0.7   NA  0.7   0.1 #>  [9,]  1.0  1.0  0.9  0.9  0.9  0.8  1.0  0.7   NA   0.4 #> [10,]  0.4  0.4  0.3  0.5  0.3  0.6  0.4  0.1  0.4    NA"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Statistics — ts_degree","title":"Network Statistics — ts_degree","text":"functions calculate respective network statistic ego. multiplied importance statistic ('parameters') constitutes network evaluation ego. See: ts_eval().","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network Statistics — ts_degree","text":"","code":"ts_degree(net, ego)  ts_recip(net, ego)  ts_outAct(net, ego)  ts_inAct(net, ego)  ts_outPop(net, ego)  ts_inPop(net, ego)  ts_transTrip(net, ego)  ts_transMedTrip(net, ego)  ts_transRecTrip(net, ego)  ts_cycle3(net, ego)  ts_egoX(net, ego, cov)  ts_altX(net, ego, cov)  ts_diffX(net, ego, cov)  ts_simX(net, ego, cov)  ts_absDiffX(net, ego, cov)  ts_sameX(net, ego, cov)  ts_egoXaltX(net, ego, cov)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network Statistics — ts_degree","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. ego numeric, ego want calculate network statistic. cov numeric, covariate scores","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network Statistics — ts_degree","text":"numeric value","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_degree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network Statistics — ts_degree","text":"examples use statistics see: vignette(\"1.Introduction_RsienaTwoStep\", package=\"RsienaTwoStep\"). mathematical definition network statistics see chapter 12 RSiena manual (Ripley et al. 2022) .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_degree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Network Statistics — ts_degree","text":"Ripley RM, Snijders TA, Boda Z, Vörös , Preciado P (2022). Manual SIENA version 4.0 (version August 11, 2022). http://www.stats.ox.ac.uk/~snijders/siena/RSiena_manual.pdf.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network Statistics — ts_degree","text":"","code":"ts_degree(net=ts_net1, ego=3) #> [1] 2"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Network census — ts_dyads","title":"Network census — ts_dyads","text":"functions calculate characteristics simulated networks.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network census — ts_dyads","text":"","code":"ts_dyads(sims, simtype = \"notypespecified\", forplot = TRUE)  ts_triads(sims, simtype = \"notypespecified\", forplot = TRUE)  ts_nacf(sims, simtype = \"notypespecified\", forplot = TRUE, cov)  ts_degreecount(sims, mode = \"out\", simtype = \"notypespecified\", forplot = TRUE)  ts_rsienanets(ans)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network census — ts_dyads","text":"sims list, list (simulated) networks, adjacency matrices representing relations actors. Valid values 0 1. simulated networks can saved objects result running ts_sims(), ts_estim() RSiena::siena07(). simtype string, name simulation type used (e.g. ministep, twostep). forplot logical, set FALSE dataframe returned column network characteristic row represents simulation outcome. set TRUE dataframe manipulated bit, row represents one specific network characteristic simulation outcome, useful plotting. cov numeric, covariate scores mode Character string, “” -degree, “” -degree “total” sum two. “” synonym “total”. ans Results class sienaFit, produced call RSiena::siena07()","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network census — ts_dyads","text":"data.frame","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_dyads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network census — ts_dyads","text":"examples use statistics see: vignette(\"Introduction_RsienaTwoStep\").","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network census — ts_dyads","text":"","code":"if (FALSE) { results_ministep <- ts_sims(net=net1, rate=5, statistics=list(ts_degree, ts_recip), parameters=c(-3,1)) results_twostep <- ts_sims(net=net1, rate=5, statistics=list(ts_degree, ts_recip), parameters=c(-3,1), p2step=1)  dts_ms <- ts_dyads(sims=results_ministep, simtype=\"ministep\") dts_ts <- ts_dyads(sims=results_twostep, simtype=\"twostep\")  df <- rbind(dts_ms, dts_ts) p <- ggplot(df, aes(x=x, y=y, fill=type)) +  geom_violin(position=position_dodge(1)) +  stat_summary(fun = mean,               geom = \"errorbar\",               fun.max = function(x) mean(x) + sd(x),               fun.min = function(x) mean(x) - sd(x),               width=.1,               color=\"red\", position=position_dodge(1)) +  stat_summary(fun = mean,               geom = \"point\",               color=\"red\", position=position_dodge(1))  p }"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_estim.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of parameters via Robbins-Monro algorithm — ts_estim","title":"Estimation of parameters via Robbins-Monro algorithm — ts_estim","text":"ts_estim workhorse function package RsienaTwoStep. details simulation function see ts_sims(). function aims estimate model parameters according Robbins-Monro algorithm described (Snijders 2001) .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_estim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of parameters via Robbins-Monro algorithm — ts_estim","text":"","code":"ts_estim(   ans = NULL,   mydata = NULL,   myeff = NULL,   startvalues = NULL,   net1 = NULL,   net2 = NULL,   ccovar = NULL,   statistics = NULL,   b = 0.5,   conv = 0.001,   nite = 1000,   itef1 = 50,   itef3 = 1000,   p2step = c(1, 0, 0),   dist1 = NULL,   dist2 = NULL,   modet1 = \"degree\",   modet2 = \"degree\",   verbose = TRUE,   parallel = FALSE,   returnDeps = FALSE,   phase1 = TRUE,   phase3 = TRUE )  ts_targets(   ans = NULL,   mydata = NULL,   myeff = NULL,   net1 = NULL,   net2 = NULL,   ccovar = NULL,   statistics = NULL )  ts_phase1(   ans = NULL,   mydata = NULL,   myeff = NULL,   net1 = NULL,   net2 = NULL,   ccovar = NULL,   statistics = NULL,   itef1 = 100,   p2step = c(1, 0, 0),   dist1 = NULL,   dist2 = NULL,   modet1 = NULL,   modet2 = NULL,   verbose = TRUE,   parallel = FALSE )  ts_phase3(   ans = NULL,   mydata = NULL,   myeff = NULL,   net1 = NULL,   net2 = NULL,   ccovar = NULL,   statistics = NULL,   startvalues = NULL,   itef3 = 1000,   p2step = c(1, 0, 0),   dist1 = NULL,   dist2 = NULL,   modet1 = \"degree\",   modet2 = \"degree\",   verbose = TRUE,   parallel = FALSE,   returnDeps = FALSE )"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_estim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of parameters via Robbins-Monro algorithm — ts_estim","text":"ans Results class sienaFit, produced call RSiena::siena07() mydata Siena data object created call RSiena::sienaDataCreate() myeff Siena effects object created call RSiena::getEffects() startvalues provided manually, taken results ans$theta, ans provided summary(myeff)$initialValue. net1 adjacency matrix, adjacency matrix representing relations actors Time=1. Valid values 0 1. provided manually, retrieved ans mydata. net2 adjacency matrix, adjacency matrix representing relations actors Time=2. Valid values 0 1. provided manually, retrieved ans mydata. ccovar data frame named time-constant covariates. provided manually, retrieved ans mydata. statistics list statistics RsienaTwoStep, see: ts_degree() DETAILS. provided manually, retrieved ans myeff. b numeric 0.1 1 (default =0.5), used Robbins-Monro algorithm. conv numeric. Robbins-Monro algorithm stops mean deviation parameters update steps become smaller conv nite number iterations phase2 (actual estimation parameters) itef1 number total iterations phase1 (get crude Jacobian matrix, can used phase2) ) itef3 number total iterations phase3 (estimate SE). phase take longest. p2step numeric vector length 3, setting ratio ministep, twostep twoministeps. parameter passed ts_sims(). dist1 numeric, minimal path length ego1 ego2 time1 order allowed start cooperation. NULL dyads allowed start cooperation. parameter passed ts_sims(). dist2 numeric, minimal path length ego1 ego2 time2 order twostep counted cooperation. parameter passed ts_sims(). modet1 string, indicating type ties evaluated time1. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego2. parameter passed ts_sims(). modet2 string, indicating type ties evaluated time2. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego2. parameter passed ts_sims(). verbose, TRUE/FALSE. set true shows iteration steps results. parallel Boolean. TRUE/FALSE. returnDeps Boolean. TRUE simulated dependent variables (networks, behaviour) phase3 returned. phase1 TRUE/FALSE, False Jacobian matrix calculated. phase3 TRUE/FALSE, FALSE SE calculated","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_estim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of parameters via Robbins-Monro algorithm — ts_estim","text":"phase3 = FALSE  dataframe estimated parameters. last row final solutions Robbins Monro algorithm. Phase 3 = TRUE list first list element data frame estimated parameters second element results phase 3. list, containing: estim, covtheta, tstat  tconv.max, zdevs, returnDeps = TRUE  simnets","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_estim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation of parameters via Robbins-Monro algorithm — ts_estim","text":"examples use ts_estim() see: vignette(\"1.Introduction_RsienaTwoStep\", package=\"RsienaTwoStep\") package website. set parallel TRUE make sure set-cluster package doParallel (see Examples). p2step==c(1,0,0): ministep p2step==c(0,1,0) & dist1==NULL & dist2==NULL: twostep-simultaneity p2step==c(0,1,0) & dist1!=NULL & dist2==NULL: twostep-strict coordination p2step==c(0,1,0) & dist1!=NULL & dist2!=NULL: twostep-weak coordination p2step==c(0,0,1): two-ministeps","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_estim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimation of parameters via Robbins-Monro algorithm — ts_estim","text":"Ripley RM, Snijders TA, Boda Z, Vörös , Preciado P (2022). Manual SIENA version 4.0 (version August 11, 2022). http://www.stats.ox.ac.uk/~snijders/siena/RSiena_manual.pdf.  Snijders TA (2001). “statistical evaluation social network dynamics.” Sociological methodology, 31(1), 361--395.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_estim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of parameters via Robbins-Monro algorithm — ts_estim","text":"","code":"if (FALSE) { # It is good practice to check if `RsienaTwoStep` uses the same # target values as `RSiena`, which can be retrieved like: `ans$targets`. ts_targets(net1 = s501, net2 = s502, statistics = list(ts_degree, ts_recip)) # In normal use case you do not want to estimate the Jacobian matrix yourself # for phase 1. We simply use the matrix from `RSiena`. Except if you really # expect different outcomes from the twostep model and not using a # Dinv matrix at all does not work. # Phase 1 only jac <- ts_phase1(net1 = s501,  net2 = s502,  statistics = list(ts_degree, ts_recip),  ccovar = NULL,  itef1 = 30) dinv <- solve(jac) #estimate without the use of RSiena ts_estim(net1 = s501, net2 = s502, statistics = list(ts_degree, ts_recip), nite = 30,  phase1 = FALSE)  #estimate without the use of RSiena ts_estim(net1 = s501, net2 = s502, statistics = list(ts_degree, ts_recip), nite = 30, itef1 = 10, phase1 = TRUE) #estimate without the use of RSiena ts_estim(net1 = s501,  net2 = s502,  statistics = list(ts_degree, ts_recip),  nite = 30,  itef1 = 10,  phase1 = TRUE,  itef3 = 10,  phase3 = TRUE) # Phase 3 only startvalues <- c(5.5, -2.2, 2.4) stat <- list(ts_degree, ts_recip) ts_phase3(startvalues = startvalues, net1 = s501, statistics = stat, itef3 = 10, verbose = TRUE) library(RSiena) mynet <- sienaDependent(array(c(s501, s502), dim=c(50, 50, 2))) mydata <- sienaDataCreate(mynet) myalgorithm <- sienaAlgorithmCreate(cond=FALSE) #toggle set conditional to retrieve the rate parameter in theta! myeff <- getEffects(mydata) ts_estim(mydata = mydata, myeff = myeff) #warning, this may take a while! ts_estim(mydata = mydata, myeff = myeff, phase3 = TRUE) ans1 <- siena07(myalgorithm, data=mydata, effects=myeff) ts_estim(ans1) }"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation function — ts_eval","title":"Evaluation function — ts_eval","text":"Evaluation function","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation function — ts_eval","text":"","code":"ts_eval(net, ego, statistics, ccovar = NULL, parameters)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation function — ts_eval","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. ego numeric, ego going calculate evaluates network. statistics list names statistic functions length parameters. See e.g. ts_degree() list available statistic functions. ccovar data frame named time-constant covariates parameters vector numeric values length statistics.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluation function — ts_eval","text":"mathematical definition evaluation function see chapter 12 RSiena manual (Ripley et al. 2022) .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_eval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluation function — ts_eval","text":"Ripley RM, Snijders TA, Boda Z, Vörös , Preciado P (2022). Manual SIENA version 4.0 (version August 11, 2022). http://www.stats.ox.ac.uk/~snijders/siena/RSiena_manual.pdf.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluation function — ts_eval","text":"","code":"ts_eval(net=ts_net1, ego=6, statistics=list(ts_degree, ts_recip), parameters=c(-2,1)) #> [1] -4 ts_eval(net=ts_net1, ego=10, ccovar=df_ccovar1, statistics=list(ts_degree, ts_recip, ts_transTrip, ts_transMedTrip, list(ts_egoX, \"cov1\")), parameters=c(-2,2,7,7,1)) #> [1] 11.4"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_geodist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance between alters — ts_geodist","title":"Distance between alters — ts_geodist","text":"Calculates distance, path length, two actors part network.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_geodist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance between alters — ts_geodist","text":"","code":"ts_geodist(net, ego1, ego2, degree = \"degree\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_geodist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance between alters — ts_geodist","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. ego1 numeric, value indicating ego1 (row number net) ego2 numeric, value indicating ego2 (row number net) degree string, type path considered: \"outdegree\"; \"indegree\"; \"degree\".","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_geodist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance between alters — ts_geodist","text":"numeric vector length one, distance two egos. egos connected ts_geodist returns Inf.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_geodist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance between alters — ts_geodist","text":"function wrapper around function sna::geodist.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_geodist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance between alters — ts_geodist","text":"","code":"ts_geodist(net=ts_net1, ego1=6, ego2=8, degree=\"outdegree\") #> [1] 2 ts_geodist(net=ts_net1, ego1=8, ego2=6, degree=\"outdegree\") #> [1] Inf ts_geodist(net=ts_net1, ego1=8, ego2=6, degree=\"degree\") #> [1] 2"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Behavior Statistics — ts_linear","title":"Behavior Statistics — ts_linear","text":"functions calculate respective behavior statistic ego. multiplied importance statistic ('parameters') constitutes network evaluation ego. See: ts_eval().","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Behavior Statistics — ts_linear","text":"","code":"ts_linear(beh, ego)  ts_quad(beh, ego)  ts_avAlt(beh, net, ego, cov = NULL)  ts_effFrom(beh, net = NULL, ego, cov)"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Behavior Statistics — ts_linear","text":"beh behavioral dependent variable ego numeric, ego want calculate network statistic. net matrix, adjacency matrix representing relations actors. Valid values 0 1. cov numeric, covariate scores","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Behavior Statistics — ts_linear","text":"numeric value","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_linear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Behavior Statistics — ts_linear","text":"examples use statistics see: vignette(\"Introduction_RsienaTwoStep\", package=\"RsienaTwoStep\"). mathematical definition network statistics see chapter 12 RSiena manual (Ripley et al. 2022) .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_linear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Behavior Statistics — ts_linear","text":"Ripley RM, Snijders TA, Boda Z, Vörös , Preciado P (2022). Manual SIENA version 4.0 (version August 11, 2022). http://www.stats.ox.ac.uk/~snijders/siena/RSiena_manual.pdf.","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Behavior Statistics — ts_linear","text":"","code":"ts_linear(df_ccovar1$cov2, ego=3) #> [1] 3"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_net1.html","id":null,"dir":"Reference","previous_headings":"","what":"ts_net1 — ts_net1","title":"ts_net1 — ts_net1","text":"fictive directed network","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_net1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ts_net1 — ts_net1","text":"","code":"ts_net1"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_net1.html","id":"ts-net-","dir":"Reference","previous_headings":"","what":"ts_net1","title":"ts_net1 — ts_net1","text":"non-symmetric (adjacency) matrix 10 rows 10 columns: 0 indicates tie; 1 indicates directed tie (ego (row) alter (column)).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_net2.html","id":null,"dir":"Reference","previous_headings":"","what":"ts_net2 — ts_net2","title":"ts_net2 — ts_net2","text":"fictive directed network","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_net2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ts_net2 — ts_net2","text":"","code":"ts_net2"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_net2.html","id":"ts-net-","dir":"Reference","previous_headings":"","what":"ts_net2","title":"ts_net2 — ts_net2","text":"non-symmetric (adjacency) matrix 5 rows 5 columns: 0 indicates tie; 1 indicates directed tie (ego (row) alter (column)).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select actor(s) — ts_select","title":"Select actor(s) — ts_select","text":"Select one two actors perform (simultaneous) ministep.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select actor(s) — ts_select","text":"","code":"ts_select(net, steps = 1, dist1 = NULL, modet1 = \"degree\")"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select actor(s) — ts_select","text":"net matrix, adjacency matrix representing relations actors. Valid values 0 1. steps numeric, want sample one two actors dist1 numeric, minimal path length ego1 ego2 time1 order allowed start coordination. NULL just simultaneity. NULL steps set 2. modet1 string indicating type ties evaluated time1. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego2.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select actor(s) — ts_select","text":"vector length one two, actors sampled.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select actor(s) — ts_select","text":"function selects one actor (steps=1) two actors (steps=2) random part network. possible select two actors start coordination (connected dyads time1), function tell .","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select actor(s) — ts_select","text":"","code":"ts_select(net=ts_net1, steps=1) #> [1] 1 ts_select(net=ts_net1, steps=2) #> [1] 5 2 ts_select(net=ts_net1, dist1=2, modet1=\"degree\") #> [1] 4 6"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_simdata.html","id":null,"dir":"Reference","previous_headings":"","what":"ts_simdata — ts_simdata","title":"ts_simdata — ts_simdata","text":"simulated co-evoluation friendships alcohol consumption","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_simdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ts_simdata — ts_simdata","text":"","code":"ts_simdata"},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_simdata.html","id":"ts-simdata","dir":"Reference","previous_headings":"","what":"ts_simdata","title":"ts_simdata — ts_simdata","text":"list containing two adjacency networks (net_sim1 net_sim2), fictive dataset (DF_sim) information simulation process (startvalues_sim, statistics_sim, p2_step_sim, dist1_sim).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_sims.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of Network evolution — ts_sims","title":"Simulation of Network evolution — ts_sims","text":"ts_sims simulates network evolution nsims times given existing network net1, defined evaluation function ts_eval(), included network statistics (taken ans, myeff, statistics) corresponding parameter estimates (starting values) taken ans, myeff, statistics.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_sims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of Network evolution — ts_sims","text":"","code":"ts_sims(   ans = NULL,   mydata = NULL,   myeff = NULL,   startvalues = NULL,   net1 = NULL,   ccovar = NULL,   statistics = NULL,   nsims = 1000,   p2step = c(1, 0, 0),   dist1 = NULL,   dist2 = NULL,   modet1 = \"degree\",   modet2 = \"degree\",   chain = FALSE,   verbose = TRUE,   parallel = FALSE )  ts_sim(   ans = NULL,   mydata = NULL,   myeff = NULL,   startvalues = NULL,   net1 = NULL,   ccovar = NULL,   statistics = NULL,   p2step = c(1, 0, 0),   dist1 = NULL,   dist2 = NULL,   modet1 = \"degree\",   modet2 = \"degree\",   chain = FALSE,   verbose = TRUE )"},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_sims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of Network evolution — ts_sims","text":"ans Results class sienaFit, produced call RSiena::siena07() mydata Siena data object created call RSiena::sienaDataCreate() myeff Siena effects object created call RSiena::getEffects() startvalues provided manually, taken results ans$theta, ans provided summary(myeff)$initialValue. net1 adjacency matrix, adjacency matrix representing relations actors Time=1. Valid values 0 1. provided manually, retrieved ans mydata. ccovar data frame named time-constant covariates. provided manually, retrieved ans mydata. statistics list statistics RsienaTwoStep, see: ts_degree() DETAILS. provided manually, retrieved ans myeff. nsims numeric, number simulations. p2step numeric vector length 3, setting ratio ministep, twostep twoministeps. parameter passed ts_sims(). dist1 numeric, minimal path length ego1 ego2 time1 order allowed start cooperation. NULL dyads allowed start cooperation. parameter passed ts_sims(). dist2 numeric, minimal path length ego1 ego2 time2 order twostep counted cooperation. parameter passed ts_sims(). modet1 string, indicating type ties evaluated time1. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego2. parameter passed ts_sims(). modet2 string, indicating type ties evaluated time2. \"degree\" considers ties undirected. \"outdegree\" allows directed paths starting ego1 ending ego2. \"indegree\" allows directed paths starting ego2 ending ego2. parameter passed ts_sims(). chain TRUE/FALSE, set TRUE want save subsequent networks (ministep twostep) simulation. FALSE end network saved. verbose TRUE/FALSE. set true shows iteration steps results. parallel Boolean. TRUE/FALSE.","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_sims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of Network evolution — ts_sims","text":"chain=FALSE list (length nsims) adjacency matrices representing final network simulated evolution. chain=TRUE list lists adjacency matrices. inner list represents complete network evolution one simulation. outer list refers simulation run (length nsims).","code":""},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_sims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of Network evolution — ts_sims","text":"examples use ts_sims see: vignette(\"1.Introduction_RsienaTwoStep\", package=\"RsienaTwoStep\") package website. set parallel TRUE make sure set-cluster package doParallel (see Examples). p2step==c(1,0,0): ministep p2step==c(0,1,0) & dist1==NULL & dist2==NULL: twostep-simultaneity p2step==c(0,1,0) & dist1!=NULL & dist2==NULL: twostep-strict coordination p2step==c(0,1,0) & dist1!=NULL & dist2!=NULL: twostep-weak coordination p2step==c(0,0,1): two-ministeps","code":""},{"path":[]},{"path":"https://jochemtolsma.github.io/RsienaTwoStep/reference/ts_sims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of Network evolution — ts_sims","text":"","code":"ts_sims(   net = ts_net2,   nsims = 2,   parallel = FALSE,   statistics = list(ts_degree, ts_recip),   startvalues = c(3, -2, 1),   p2step = c(0, 1, 0) ) #> [1] \"nsim: 1\" #> [1] \"nsim: 2\" #> [[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>"}]
