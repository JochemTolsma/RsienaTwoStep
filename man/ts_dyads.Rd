% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/census.R
\name{ts_dyads}
\alias{ts_dyads}
\alias{ts_dyads_evo}
\alias{ts_triads}
\alias{ts_triads_evo}
\alias{ts_nacf}
\alias{ts_degreecount}
\alias{ts_rsienanets}
\title{Network census}
\usage{
ts_dyads(sims, simtype = "notypespecified", forplot = TRUE)

ts_dyads_evo(sims, net1, simtype = "notypespecified", forplot = TRUE)

ts_triads(sims, simtype = "notypespecified", forplot = TRUE)

ts_triads_evo(sims, net1, simtype = "notypespecified", forplot = TRUE)

ts_nacf(sims, simtype = "notypespecified", forplot = TRUE, cov)

ts_degreecount(sims, mode = "out", simtype = "notypespecified", forplot = TRUE)

ts_rsienanets(ans)
}
\arguments{
\item{sims}{list, a list of (simulated) networks, the adjacency matrices
representing the relations between actors. Valid values are 0 and 1. These
simulated networks can be saved in objects that result from running
\code{\link[=ts_sims]{ts_sims()}}, \code{\link[=ts_estim]{ts_estim()}} or \code{\link[RSiena:siena07]{RSiena::siena07()}}.}

\item{simtype}{string, name of the simulation type used (e.g. \emph{ministep},
\emph{twostep}).}

\item{forplot}{logical, if set to \code{FALSE} a dataframe is returned with in the
column the network characteristic and each row represents a simulation
outcome. If set to \code{TRUE} this dataframe is manipulated a bit, so that each
row represents one specific network characteristic for each simulation
outcome, this is useful for plotting.}

\item{net1}{adjacency matrix, the adjacency matrix representing the relations
between actors at Time=1. Valid values are 0 and 1.}

\item{cov}{numeric, covariate scores}

\item{mode}{Character string, “out” for out-degree, “in” for in-degree or “total” for the sum of the two. “all” is a synonym of “total”.}

\item{ans}{Results of class sienaFit, produced by a call to
\code{\link[RSiena:siena07]{RSiena::siena07()}}}
}
\value{
\code{data.frame}
}
\description{
These functions calculate characteristics of the simulated
networks.

Functions with _evo in their name calculate characteristics of
the simulated networks by taking into account the starting network. For
each specific dyad/triad it counts which and how many tie-changes have
occured. In this way it is possible to get a feeling if twosteps were
likely. These functions can also be used to assess whether the DGP of the observed data is likely to be the result of twosteps.
}
\details{
For examples on how to use these statistics see:
vignette("Introduction_RsienaTwoStep").
}
\examples{
\dontrun{
results_ministep <- ts_sims(net=net1, rate=5, statistics=list(ts_degree, ts_recip),
parameters=c(-3,1))
results_twostep <- ts_sims(net=net1, rate=5, statistics=list(ts_degree, ts_recip),
parameters=c(-3,1), p2step=1)

dts_ms <- ts_dyads(sims=results_ministep, simtype="ministep")
dts_ts <- ts_dyads(sims=results_twostep, simtype="twostep")

df <- rbind(dts_ms, dts_ts)
p <- ggplot(df, aes(x=x, y=y, fill=type)) +
 geom_violin(position=position_dodge(1)) +
 stat_summary(fun = mean,
              geom = "errorbar",
              fun.max = function(x) mean(x) + sd(x),
              fun.min = function(x) mean(x) - sd(x),
              width=.1,
              color="red", position=position_dodge(1)) +
 stat_summary(fun = mean,
              geom = "point",
              color="red", position=position_dodge(1))

p
}
}
\seealso{
\code{\link[RSiena:sienaGOF]{RSiena::sienaGOF()}}, \code{\link[RSiena:sienaGOF-auxiliary]{RSiena::sienaGOF-auxiliary()}}
}
\concept{networkcensus}
